{"version":3,"sources":["../node_modules/wappalyzer-core/wappalyzer.js","../src/core/request.ts","../src/modules/securityHeaders.ts","../src/modules/formDetection.ts","../src/modules/sensitiveFiles.ts","../src/modules/subdomains.ts","../src/modules/techStack.ts","../src/modules/libraryVulnerabilities.ts","../src/modules/waybackMachine.ts","../src/modules/firewall.ts","../src/frontend/index.ts","../src/backend/TLS_SSL_Scanner.ts","../src/backend/dnsScanner.ts","../src/backend/portScanner.ts"],"names":["benchmarks","resolved","match","name","dns","dom","parsed","pattern","input","lib","promisify","resolveTxt","resolveMx","resolveNs","net"],"mappings":"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","sourcesContent":["'use strict'\n\nfunction toArray(value) {\n  return Array.isArray(value) ? value : [value]\n}\n\nconst benchmarkEnabled =\n  typeof process !== 'undefined' ? !!process.env.WAPPALYZER_BENCHMARK : false\n\nlet benchmarks = []\n\nfunction benchmark(duration, pattern, value = '', technology) {\n  if (!benchmarkEnabled) {\n    return\n  }\n\n  benchmarks.push({\n    duration,\n    pattern: String(pattern.regex),\n    value: String(value).slice(0, 100),\n    valueLength: value.length,\n    technology: technology.name,\n  })\n}\n\nfunction benchmarkSummary() {\n  if (!benchmarkEnabled) {\n    return\n  }\n\n  const totalPatterns = Object.values(benchmarks).length\n  const totalDuration = Object.values(benchmarks).reduce(\n    (sum, { duration }) => sum + duration,\n    0\n  )\n\n  // eslint-disable-next-line no-console\n  console.log({\n    totalPatterns,\n    totalDuration,\n    averageDuration: Math.round(totalDuration / totalPatterns),\n    slowestTechnologies: Object.values(\n      benchmarks.reduce((benchmarks, { duration, technology }) => {\n        if (benchmarks[technology]) {\n          benchmarks[technology].duration += duration\n        } else {\n          benchmarks[technology] = { technology, duration }\n        }\n\n        return benchmarks\n      }, {})\n    )\n      .sort(({ duration: a }, { duration: b }) => (a > b ? -1 : 1))\n      .filter(({ duration }) => duration)\n      .slice(0, 5)\n      .reduce(\n        (technologies, { technology, duration }) => ({\n          ...technologies,\n          [technology]: duration,\n        }),\n        {}\n      ),\n    slowestPatterns: Object.values(benchmarks)\n      .sort(({ duration: a }, { duration: b }) => (a > b ? -1 : 1))\n      .filter(({ duration }) => duration)\n      .slice(0, 5),\n  })\n}\n\nconst Wappalyzer = {\n  technologies: [],\n  categories: [],\n  requires: [],\n  categoryRequires: [],\n\n  slugify: (string) =>\n    string\n      .toLowerCase()\n      .replace(/[^a-z0-9-]/g, '-')\n      .replace(/--+/g, '-')\n      .replace(/(?:^-|-$)/g, ''),\n\n  getTechnology: (name) =>\n    [\n      ...Wappalyzer.technologies,\n      ...Wappalyzer.requires.map(({ technologies }) => technologies).flat(),\n      ...Wappalyzer.categoryRequires\n        .map(({ technologies }) => technologies)\n        .flat(),\n    ].find(({ name: _name }) => name === _name),\n\n  getCategory: (id) => Wappalyzer.categories.find(({ id: _id }) => id === _id),\n\n  /**\n   * Resolve promises for implied technology.\n   * @param {Array} detections\n   */\n  resolve(detections = []) {\n    const resolved = detections.reduce((resolved, { technology, lastUrl }) => {\n      if (\n        resolved.findIndex(\n          ({ technology: { name } }) => name === technology?.name\n        ) === -1\n      ) {\n        let version = ''\n        let confidence = 0\n        let rootPath\n\n        detections\n          .filter(\n            ({ technology: _technology }) =>\n              _technology && _technology.name === technology.name\n          )\n          .forEach(\n            ({\n              technology: { name },\n              pattern,\n              version: _version = '',\n              rootPath: _rootPath,\n            }) => {\n              confidence = Math.min(100, confidence + pattern.confidence)\n              version =\n                _version.length > version.length &&\n                _version.length <= 15 &&\n                (parseInt(_version, 10) || 0) < 10000 // Ignore long numeric strings like timestamps\n                  ? _version\n                  : version\n              rootPath = rootPath || _rootPath || undefined\n            }\n          )\n\n        resolved.push({ technology, confidence, version, rootPath, lastUrl })\n      }\n\n      return resolved\n    }, [])\n\n    Wappalyzer.resolveExcludes(resolved)\n    Wappalyzer.resolveImplies(resolved)\n\n    const priority = ({ technology: { categories } }) =>\n      categories.reduce(\n        (max, id) => Math.max(max, Wappalyzer.getCategory(id).priority),\n        0\n      )\n\n    return resolved\n      .sort((a, b) => (priority(a) > priority(b) ? 1 : -1))\n      .map(\n        ({\n          technology: {\n            name,\n            description,\n            slug,\n            categories,\n            icon,\n            website,\n            pricing,\n            cpe,\n          },\n          confidence,\n          version,\n          rootPath,\n          lastUrl,\n        }) => ({\n          name,\n          description,\n          slug,\n          categories: categories.map((id) => Wappalyzer.getCategory(id)),\n          confidence,\n          version,\n          icon,\n          website,\n          pricing,\n          cpe,\n          rootPath,\n          lastUrl,\n        })\n      )\n  },\n\n  /**\n   * Resolve promises for version of technology.\n   * @param {Promise} resolved\n   * @param match\n   */\n  resolveVersion({ version, regex }, match) {\n    let resolved = version\n\n    if (version) {\n      const matches = regex.exec(match)\n\n      if (matches) {\n        matches.forEach((match, index) => {\n          if (String(match).length > 10) {\n            return\n          }\n\n          // Parse ternary operator\n          const ternary = new RegExp(`\\\\\\\\${index}\\\\?([^:]+):(.*)$`).exec(\n            version\n          )\n\n          if (ternary && ternary.length === 3) {\n            resolved = version.replace(\n              ternary[0],\n              match ? ternary[1] : ternary[2]\n            )\n          }\n\n          // Replace back references\n          resolved = resolved\n            .trim()\n            .replace(new RegExp(`\\\\\\\\${index}`, 'g'), match || '')\n        })\n\n        // Remove unmatched back references\n        resolved = resolved.replace(/\\\\\\d/, '')\n      }\n    }\n\n    return resolved\n  },\n\n  /**\n   * Resolve promises for excluded technology.\n   * @param {Promise} resolved\n   */\n  resolveExcludes(resolved) {\n    resolved.forEach(({ technology }) => {\n      technology.excludes.forEach(({ name }) => {\n        const excluded = Wappalyzer.getTechnology(name)\n\n        if (!excluded) {\n          throw new Error(`Excluded technology does not exist: ${name}`)\n        }\n\n        let index\n\n        do {\n          index = resolved.findIndex(\n            ({ technology: { name } }) => name === excluded.name\n          )\n\n          if (index !== -1) {\n            resolved.splice(index, 1)\n          }\n        } while (index !== -1)\n      })\n    })\n  },\n\n  /**\n   * Resolve promises for implied technology.\n   * @param {Promise} resolved\n   */\n  resolveImplies(resolved) {\n    let done = false\n\n    do {\n      done = true\n\n      resolved.forEach(({ technology, confidence, lastUrl }) => {\n        technology.implies.forEach(\n          ({ name, confidence: _confidence, version }) => {\n            const implied = Wappalyzer.getTechnology(name)\n\n            if (!implied) {\n              throw new Error(`Implied technology does not exist: ${name}`)\n            }\n\n            if (\n              resolved.findIndex(\n                ({ technology: { name } }) => name === implied.name\n              ) === -1\n            ) {\n              resolved.push({\n                technology: implied,\n                confidence: Math.min(confidence, _confidence),\n                version: version || '',\n                lastUrl,\n              })\n\n              done = false\n            }\n          }\n        )\n      })\n    } while (resolved.length && !done)\n  },\n\n  /**\n   * Initialize analyzation.\n   * @param {*} param0\n   */\n  analyze(items, technologies = Wappalyzer.technologies) {\n    benchmarks = []\n\n    const oo = Wappalyzer.analyzeOneToOne\n    const om = Wappalyzer.analyzeOneToMany\n    const mm = Wappalyzer.analyzeManyToMany\n\n    const relations = {\n      certIssuer: oo,\n      cookies: mm,\n      css: oo,\n      dns: mm,\n      headers: mm,\n      html: oo,\n      meta: mm,\n      probe: mm,\n      robots: oo,\n      scriptSrc: om,\n      scripts: oo,\n      text: oo,\n      url: oo,\n      xhr: oo,\n    }\n\n    try {\n      const detections = technologies\n        .map((technology) =>\n          Object.keys(relations)\n            .map(\n              (type) =>\n                items[type] && relations[type](technology, type, items[type])\n            )\n            .flat()\n        )\n        .flat()\n        .filter((technology) => technology)\n\n      benchmarkSummary()\n\n      return detections\n    } catch (error) {\n      throw new Error(error.message || error.toString())\n    }\n  },\n\n  /**\n   * Extract technologies from data collected.\n   * @param {object} data\n   */\n  setTechnologies(data) {\n    const transform = Wappalyzer.transformPatterns\n\n    Wappalyzer.technologies = Object.keys(data).reduce((technologies, name) => {\n      const {\n        cats,\n        certIssuer,\n        cookies,\n        cpe,\n        css,\n        description,\n        dns,\n        dom,\n        excludes,\n        headers,\n        html,\n        icon,\n        implies,\n        js,\n        meta,\n        pricing,\n        probe,\n        requires,\n        requiresCategory,\n        robots,\n        scriptSrc,\n        scripts,\n        text,\n        url,\n        website,\n        xhr,\n      } = data[name]\n\n      technologies.push({\n        categories: cats || [],\n        certIssuer: transform(certIssuer),\n        cookies: transform(cookies),\n        cpe: cpe || null,\n        css: transform(css),\n        description: description || null,\n        dns: transform(dns),\n        dom: transform(\n          typeof dom === 'string' || Array.isArray(dom)\n            ? toArray(dom).reduce(\n                (dom, selector) => ({ ...dom, [selector]: { exists: '' } }),\n                {}\n              )\n            : dom,\n          true,\n          false\n        ),\n        excludes: transform(excludes).map(({ value }) => ({ name: value })),\n        headers: transform(headers),\n        html: transform(html),\n        icon: icon || 'default.svg',\n        implies: transform(implies).map(({ value, confidence, version }) => ({\n          name: value,\n          confidence,\n          version,\n        })),\n        js: transform(js, true),\n        meta: transform(meta),\n        name,\n        pricing: pricing || [],\n        probe: transform(probe, true),\n        requires: transform(requires).map(({ value }) => ({ name: value })),\n        requiresCategory: transform(requiresCategory).map(({ value }) => ({\n          id: value,\n        })),\n        robots: transform(robots),\n        scriptSrc: transform(scriptSrc),\n        scripts: transform(scripts),\n        slug: Wappalyzer.slugify(name),\n        text: transform(text),\n        url: transform(url),\n        website: website || null,\n        xhr: transform(xhr),\n      })\n\n      return technologies\n    }, [])\n\n    Wappalyzer.technologies\n      .filter(({ requires }) => requires.length)\n      .forEach((technology) =>\n        technology.requires.forEach(({ name }) => {\n          if (!Wappalyzer.getTechnology(name)) {\n            throw new Error(`Required technology does not exist: ${name}`)\n          }\n\n          Wappalyzer.requires[name] = Wappalyzer.requires[name] || []\n\n          Wappalyzer.requires[name].push(technology)\n        })\n      )\n\n    Wappalyzer.requires = Object.keys(Wappalyzer.requires).map((name) => ({\n      name,\n      technologies: Wappalyzer.requires[name],\n    }))\n\n    Wappalyzer.technologies\n      .filter(({ requiresCategory }) => requiresCategory.length)\n      .forEach((technology) =>\n        technology.requiresCategory.forEach(({ id }) => {\n          Wappalyzer.categoryRequires[id] =\n            Wappalyzer.categoryRequires[id] || []\n\n          Wappalyzer.categoryRequires[id].push(technology)\n        })\n      )\n\n    Wappalyzer.categoryRequires = Object.keys(Wappalyzer.categoryRequires).map(\n      (id) => ({\n        categoryId: parseInt(id, 10),\n        technologies: Wappalyzer.categoryRequires[id],\n      })\n    )\n\n    Wappalyzer.technologies = Wappalyzer.technologies.filter(\n      ({ requires, requiresCategory }) =>\n        !requires.length && !requiresCategory.length\n    )\n  },\n\n  /**\n   * Assign categories for data.\n   * @param {Object} data\n   */\n  setCategories(data) {\n    Wappalyzer.categories = Object.keys(data)\n      .reduce((categories, id) => {\n        const category = data[id]\n\n        categories.push({\n          id: parseInt(id, 10),\n          slug: Wappalyzer.slugify(category.name),\n          ...category,\n        })\n\n        return categories\n      }, [])\n      .sort(({ priority: a }, { priority: b }) => (a > b ? -1 : 0))\n  },\n\n  /**\n   * Transform patterns for internal use.\n   * @param {string|array} patterns\n   * @param {boolean} caseSensitive\n   */\n  transformPatterns(patterns, caseSensitive = false, isRegex = true) {\n    if (!patterns) {\n      return []\n    }\n\n    if (\n      typeof patterns === 'string' ||\n      typeof patterns === 'number' ||\n      Array.isArray(patterns)\n    ) {\n      patterns = { main: patterns }\n    }\n\n    const parsed = Object.keys(patterns).reduce((parsed, key) => {\n      parsed[caseSensitive ? key : key.toLowerCase()] = toArray(\n        patterns[key]\n      ).map((pattern) => Wappalyzer.parsePattern(pattern, isRegex))\n\n      return parsed\n    }, {})\n\n    return 'main' in parsed ? parsed.main : parsed\n  },\n\n  /**\n   * Extract information from regex pattern.\n   * @param {string|object} pattern\n   */\n  parsePattern(pattern, isRegex = true) {\n    if (typeof pattern === 'object') {\n      return Object.keys(pattern).reduce(\n        (parsed, key) => ({\n          ...parsed,\n          [key]: Wappalyzer.parsePattern(pattern[key]),\n        }),\n        {}\n      )\n    } else {\n      const { value, regex, confidence, version } = pattern\n        .toString()\n        .split('\\\\;')\n        .reduce((attrs, attr, i) => {\n          if (i) {\n            // Key value pairs\n            attr = attr.split(':')\n\n            if (attr.length > 1) {\n              attrs[attr.shift()] = attr.join(':')\n            }\n          } else {\n            attrs.value = typeof pattern === 'number' ? pattern : attr\n\n            attrs.regex = new RegExp(\n              isRegex\n                ? attr\n                    // Escape slashes\n                    .replace(/\\//g, '\\\\/')\n                    // Optimise quantifiers for long strings\n                    .replace(/\\\\\\+/g, '__escapedPlus__')\n                    .replace(/\\+/g, '{1,250}')\n                    .replace(/\\*/g, '{0,250}')\n                    .replace(/__escapedPlus__/g, '\\\\+')\n                : '',\n              'i'\n            )\n          }\n\n          return attrs\n        }, {})\n\n      return {\n        value,\n        regex,\n        confidence: parseInt(confidence || 100, 10),\n        version: version || '',\n      }\n    }\n  },\n\n  /**\n   * @todo describe\n   * @param {Object} technology\n   * @param {String} type\n   * @param {String} value\n   */\n  analyzeOneToOne(technology, type, value) {\n    return technology[type].reduce((technologies, pattern) => {\n      const startTime = Date.now()\n\n      const matches = pattern.regex.exec(value)\n\n      if (matches) {\n        technologies.push({\n          technology,\n          pattern: {\n            ...pattern,\n            type,\n            value,\n            match: matches[0],\n          },\n          version: Wappalyzer.resolveVersion(pattern, value),\n        })\n      }\n\n      benchmark(Date.now() - startTime, pattern, value, technology)\n\n      return technologies\n    }, [])\n  },\n\n  /**\n   * @todo update\n   * @param {Object} technology\n   * @param {String} type\n   * @param {Array} items\n   */\n  analyzeOneToMany(technology, type, items = []) {\n    return items.reduce((technologies, value) => {\n      const patterns = technology[type] || []\n\n      patterns.forEach((pattern) => {\n        const startTime = Date.now()\n\n        const matches = pattern.regex.exec(value)\n\n        if (matches) {\n          technologies.push({\n            technology,\n            pattern: {\n              ...pattern,\n              type,\n              value,\n              match: matches[0],\n            },\n            version: Wappalyzer.resolveVersion(pattern, value),\n          })\n        }\n\n        benchmark(Date.now() - startTime, pattern, value, technology)\n      })\n\n      return technologies\n    }, [])\n  },\n\n  /**\n   *\n   * @param {Object} technology\n   * @param {string} types\n   * @param {Array} items\n   */\n  analyzeManyToMany(technology, types, items = {}) {\n    const [type, ...subtypes] = types.split('.')\n\n    return Object.keys(technology[type]).reduce((technologies, key) => {\n      const patterns = technology[type][key] || []\n      const values = items[key] || []\n\n      patterns.forEach((_pattern) => {\n        const pattern = (subtypes || []).reduce(\n          (pattern, subtype) => pattern[subtype] || {},\n          _pattern\n        )\n\n        values.forEach((value) => {\n          const startTime = Date.now()\n\n          const matches = pattern.regex.exec(value)\n\n          if (matches) {\n            technologies.push({\n              technology,\n              pattern: {\n                ...pattern,\n                type,\n                value,\n                match: matches[0],\n              },\n              version: Wappalyzer.resolveVersion(pattern, value),\n            })\n          }\n\n          benchmark(Date.now() - startTime, pattern, value, technology)\n        })\n      })\n\n      return technologies\n    }, [])\n  },\n}\n\nif (typeof module !== 'undefined') {\n  module.exports = Wappalyzer\n}\n","import { default as axios, AxiosRequestConfig } from 'axios';\r\nimport { ScannerInput } from '../types';\r\n\r\n/**\r\n * Makes HTTP requests with appropriate timeouts and error handling\r\n */\r\nexport interface MakeRequestResult {\r\n  status: number;\r\n  headers: Record<string, string | string[]>;\r\n  data: any;\r\n  error: string | null;\r\n}\r\n\r\nexport const makeRequest = async (\r\n  url: string,\r\n  options?: {\r\n    headers?: Record<string, string>;\r\n    timeout?: number;\r\n    method?: 'GET' | 'POST' | 'HEAD';\r\n    data?: any;\r\n  }\r\n): Promise<MakeRequestResult> => {\r\n  try {\r\n    const config: AxiosRequestConfig = {\r\n      url,\r\n      method: options?.method || 'GET',\r\n      headers: {\r\n        'User-Agent': 'Mozilla/5.0 (compatible; SecurityScanner/1.0)',\r\n        ...options?.headers\r\n      },\r\n      timeout: options?.timeout || 10000, // Default 10s timeout\r\n      data: options?.data,\r\n      validateStatus: () => true // Don't throw on any HTTP status code\r\n    };\r\n    \r\n    const response = await axios(config);\r\n    return {\r\n      status: response.status,\r\n      headers: response.headers as Record<string, string | string[]>,\r\n      data: response.data,\r\n      error: null\r\n    };\r\n  } catch (error: any) {\r\n    // This will only catch network errors, timeouts, etc.\r\n    // HTTP errors like 404, 500 are handled by validateStatus above\r\n    return {\r\n      status: 0,\r\n      headers: {},\r\n      data: null,\r\n      error: error.message || 'Request failed'\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Gets the normalized base URL from an input\r\n */\r\nexport const normalizeUrl = (input: string): string => {\r\n  if (!input) return '';\r\n  \r\n  // Add protocol if missing\r\n  let url = input;\r\n  if (!url.startsWith('http://') && !url.startsWith('https://')) {\r\n    url = 'https://' + url;\r\n  }\r\n  \r\n  try {\r\n    const parsed = new URL(url);\r\n    return parsed.origin;\r\n  } catch (e) {\r\n    return url;\r\n  }\r\n};\r\n\r\n/**\r\n * Extracts domain from URL\r\n */\r\nexport const extractDomain = (url: string): string => {\r\n  try {\r\n    // Remove protocol and www if present\r\n    const parsed = new URL(normalizeUrl(url));\r\n    let domain = parsed.hostname;\r\n    \r\n    if (domain.startsWith('www.')) {\r\n      domain = domain.substring(4);\r\n    }\r\n    \r\n    return domain;\r\n  } catch (e) {\r\n    return url.replace(/^(https?:\\/\\/)?(www\\.)?/, '').split('/')[0];\r\n  }\r\n};\r\n\r\n/**\r\n * Helper to safely parse JSON\r\n */\r\nexport const safeJsonParse = (text: string): any => {\r\n  try {\r\n    return JSON.parse(text);\r\n  } catch (e) {\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Creates common scanner input from various formats\r\n */\r\nexport const createScannerInput = (target: string | ScannerInput): ScannerInput => {\r\n  if (typeof target === 'string') {\r\n    return {\r\n      target: normalizeUrl(target),\r\n      timeout: 10000\r\n    };\r\n  }\r\n  \r\n  return {\r\n    ...target,\r\n    target: normalizeUrl(target.target)\r\n  };\r\n};\r\n","import { SecurityHeadersResult, Scanner, ScannerInput } from '../types.js';\r\nimport { makeRequest, createScannerInput } from '../core/request.js';\r\n\r\n// Define required security headers and their descriptions\r\nconst SECURITY_HEADERS = {\r\n  'strict-transport-security': {\r\n    description: 'HTTP Strict Transport Security (HSTS) enforces secure (HTTPS) connections',\r\n    severity: 'high',\r\n  },\r\n  'content-security-policy': {\r\n    description: 'Content Security Policy prevents XSS and data injection attacks',\r\n    severity: 'high',\r\n  },\r\n  'x-content-type-options': {\r\n    description: 'X-Content-Type-Options prevents MIME-sniffing',\r\n    severity: 'medium',\r\n  },\r\n  'x-frame-options': {\r\n    description: 'X-Frame-Options protects against clickjacking',\r\n    severity: 'medium',\r\n  },\r\n  'x-xss-protection': {\r\n    description: 'X-XSS-Protection enables the cross-site scripting filter',\r\n    severity: 'medium',\r\n  },\r\n  'referrer-policy': {\r\n    description: 'Referrer Policy controls how much information is sent in the Referer header',\r\n    severity: 'low',\r\n  },\r\n  'permissions-policy': {\r\n    description: 'Permissions Policy controls which browser features can be used',\r\n    severity: 'low',\r\n  },\r\n  'cross-origin-embedder-policy': {\r\n    description: 'Cross-Origin Embedder Policy prevents loading cross-origin resources',\r\n    severity: 'low',\r\n  },\r\n  'cross-origin-opener-policy': {\r\n    description: 'Cross-Origin Opener Policy prevents opening cross-origin windows',\r\n    severity: 'low',\r\n  },\r\n  'cross-origin-resource-policy': {\r\n    description: 'Cross-Origin Resource Policy prevents cross-origin loading',\r\n    severity: 'low',\r\n  }\r\n} as const;\r\n\r\n/**\r\n * Scan security headers of a website\r\n */\r\nexport const scanSecurityHeaders: Scanner<SecurityHeadersResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  \r\n  try {\r\n    // Make a HEAD request to get headers with minimal data transfer\r\n    const response = await makeRequest(normalizedInput.target, {\r\n      method: 'HEAD',\r\n      timeout: normalizedInput.timeout,\r\n      headers: normalizedInput.headers\r\n    });\r\n    \r\n    if (response.error || !response.headers) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'securityHeaders',\r\n        error: response.error || 'Failed to retrieve headers',\r\n        data: {\r\n          headers: {},\r\n          missing: Object.keys(SECURITY_HEADERS),\r\n          issues: [],\r\n          score: 0\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Convert all header names to lowercase for case-insensitive matching\r\n    const headers: Record<string, string> = {};\r\n    const headerNames = Object.keys(response.headers);\r\n    \r\n    headerNames.forEach(name => {\r\n      headers[name.toLowerCase()] = response.headers[name] as string;\r\n    });\r\n    \r\n    // Check which headers are missing\r\n    const missing: string[] = [];\r\n    const issues: {\r\n      severity: 'high' | 'medium' | 'low' | 'info';\r\n      header: string;\r\n      description: string;\r\n    }[] = [];\r\n    \r\n    Object.keys(SECURITY_HEADERS).forEach(header => {\r\n      if (!headers[header]) {\r\n        missing.push(header);\r\n        issues.push({\r\n          severity: SECURITY_HEADERS[header as keyof typeof SECURITY_HEADERS].severity as any,\r\n          header,\r\n          description: `Missing ${header} header. ${SECURITY_HEADERS[header as keyof typeof SECURITY_HEADERS].description}`\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Calculate a simple score (100 - deductions)\r\n    const totalHeaders = Object.keys(SECURITY_HEADERS).length;\r\n    const presentHeaders = totalHeaders - missing.length;\r\n    const score = Math.round((presentHeaders / totalHeaders) * 100);\r\n    \r\n    // Check content of headers for common issues\r\n    if (headers['strict-transport-security'] && \r\n        !headers['strict-transport-security'].includes('max-age=')) {\r\n      issues.push({\r\n        severity: 'medium',\r\n        header: 'strict-transport-security',\r\n        description: 'HSTS header does not include max-age directive'\r\n      });\r\n    }\r\n    \r\n    if (headers['x-frame-options'] && \r\n        !['DENY', 'SAMEORIGIN'].includes(headers['x-frame-options'].toUpperCase())) {\r\n      issues.push({\r\n        severity: 'medium',\r\n        header: 'x-frame-options',\r\n        description: 'X-Frame-Options should be set to DENY or SAMEORIGIN'\r\n      });\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'securityHeaders',\r\n      data: {\r\n        headers,\r\n        missing,\r\n        issues,\r\n        score\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'securityHeaders',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        headers: {},\r\n        missing: Object.keys(SECURITY_HEADERS),\r\n        issues: [],\r\n        score: 0\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import { FormDetectionResult, Scanner, ScannerInput } from '../types.js';\r\nimport { makeRequest, createScannerInput } from '../core/request.js';\r\nimport * as cheerio from 'cheerio';\r\n\r\n/**\r\n * Detect forms on a webpage and analyze their security\r\n */\r\nexport const detectForms: Scanner<FormDetectionResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  \r\n  try {\r\n    let html: string;\r\n    \r\n    // If content is provided in options, use that instead of making a request\r\n    if (normalizedInput.options?.html) {\r\n      html = normalizedInput.options.html;\r\n    } else {\r\n      // Make a request to get the HTML content\r\n      const response = await makeRequest(normalizedInput.target, {\r\n        method: 'GET',\r\n        timeout: normalizedInput.timeout,\r\n        headers: normalizedInput.headers\r\n      });\r\n      \r\n      if (response.error || !response.data) {\r\n        return {\r\n          status: 'failure',\r\n          scanner: 'formDetection',\r\n          error: response.error || 'Failed to retrieve HTML content',\r\n          data: { forms: [], total: 0 },\r\n          timeTaken: Date.now() - startTime\r\n        };\r\n      }\r\n      \r\n      html = typeof response.data === 'string' ? response.data : String(response.data);\r\n    }\r\n    \r\n    // Load HTML into cheerio for DOM parsing\r\n    const $ = cheerio.load(html);\r\n    const forms = $('form');\r\n    const formResults: FormDetectionResult['forms'] = [];    forms.each((_i: number, formElement: any) => {\r\n      const form = $(formElement);\r\n      const action = form.attr('action') || '';\r\n      const method = (form.attr('method') || 'get').toLowerCase();\r\n      \r\n      // Parse inputs\r\n      const inputs: {\r\n        name?: string;\r\n        type: string;\r\n        id?: string;\r\n        required: boolean;\r\n        autocomplete?: string;\r\n      }[] = [];\r\n      \r\n      const formInputs = form.find('input, select, textarea, button[type=\"submit\"]');\r\n      \r\n      formInputs.each((_j: number, inputElement: any) => {\r\n        const input = $(inputElement);\r\n        const type = input.attr('type') || 'text';\r\n        \r\n        inputs.push({\r\n          name: input.attr('name'),\r\n          type,\r\n          id: input.attr('id'),\r\n          required: input.attr('required') !== undefined,\r\n          autocomplete: input.attr('autocomplete')\r\n        });\r\n      });\r\n      \r\n      // Check if the form has a password field\r\n      const hasPassword = inputs.some(input => input.type === 'password');\r\n      \r\n      // Check for CSRF protection tokens\r\n      const hasCSRF = inputs.some(input => {\r\n        const name = (input.name || '').toLowerCase();\r\n        return name.includes('csrf') || \r\n               name.includes('token') || \r\n               name.includes('nonce') || \r\n               name === '_token';\r\n      });\r\n      \r\n      // Identify potential security issues\r\n      const issues: {\r\n        severity: 'high' | 'medium' | 'low' | 'info';\r\n        description: string;\r\n      }[] = [];\r\n      \r\n      // For login/auth forms\r\n      if (hasPassword) {\r\n        // Insecure method\r\n        if (method !== 'post') {\r\n          issues.push({\r\n            severity: 'high',\r\n            description: 'Login form uses insecure method (GET). Should use POST to prevent credentials in URL.'\r\n          });\r\n        }\r\n        \r\n        // Missing CSRF protection\r\n        if (!hasCSRF) {\r\n          issues.push({\r\n            severity: 'high',\r\n            description: 'Form appears to be missing CSRF protection token.'\r\n          });\r\n        }\r\n        \r\n        // Check for HTTPS action\r\n        if (action && action.startsWith('http:')) {\r\n          issues.push({\r\n            severity: 'high',\r\n            description: 'Form submits to insecure (HTTP) endpoint.'\r\n          });\r\n        }\r\n        \r\n        // Check for autocomplete on password fields\r\n        const passwordInputs = inputs.filter(input => input.type === 'password');\r\n        if (passwordInputs.some(input => input.autocomplete !== 'off' && input.autocomplete !== 'new-password')) {\r\n          issues.push({\r\n            severity: 'medium',\r\n            description: 'Password field doesn\\'t have autocomplete=\"off\" or autocomplete=\"new-password\".'\r\n          });\r\n        }\r\n      }\r\n      \r\n      formResults.push({\r\n        action,\r\n        method,\r\n        inputs,\r\n        hasPassword,\r\n        hasCSRF,\r\n        issues\r\n      });\r\n    });\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'formDetection',\r\n      data: {\r\n        forms: formResults,\r\n        total: formResults.length\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'formDetection',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: { forms: [], total: 0 },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import { ScannerInput, Scanner, SensitiveFileResult } from '../types';\r\nimport { makeRequest, normalizeUrl, createScannerInput } from '../core/request';\r\n\r\n// List of potentially sensitive files/paths to check\r\nconst SENSITIVE_PATHS = [\r\n  '/.git/config',\r\n  '/.env',\r\n  '/.env.local',\r\n  '/.env.development',\r\n  '/.env.production',\r\n  '/config.json',\r\n  '/config.js',\r\n  '/config.php',\r\n  '/wp-config.php',\r\n  '/config.xml',\r\n  '/credentials.json',\r\n  '/secrets.json',\r\n  '/settings.json',\r\n  '/database.yml',\r\n  '/db.sqlite',\r\n  '/backup.zip',\r\n  '/backup.sql',\r\n  '/backup.tar.gz',\r\n  '/dump.sql',\r\n  '/users.sql',\r\n  '/users.csv',\r\n  '/phpinfo.php',\r\n  '/info.php',\r\n  '/.htpasswd',\r\n  '/server-status',\r\n  '/server-info',\r\n  '/readme.md',\r\n  '/README.md',\r\n  '/api/swagger',\r\n  '/api/docs',\r\n  '/swagger.json',\r\n  '/swagger-ui.html',\r\n  '/robots.txt',\r\n  '/sitemap.xml',\r\n  '/.well-known/security.txt'\r\n];\r\n\r\n/**\r\n * Scan for exposed sensitive files\r\n */\r\nexport const scanSensitiveFiles: Scanner<SensitiveFileResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const baseUrl = normalizeUrl(normalizedInput.target);\r\n  const timeout = normalizedInput.timeout || 5000;\r\n  \r\n  const exposedFiles: SensitiveFileResult['exposedFiles'] = [];\r\n  const issues: SensitiveFileResult['issues'] = [];\r\n  \r\n  try {\r\n    // Filter paths to test based on options\r\n    let pathsToTest = [...SENSITIVE_PATHS];\r\n    if (normalizedInput.options?.additionalPaths) {\r\n      pathsToTest = pathsToTest.concat(normalizedInput.options.additionalPaths);\r\n    }\r\n    \r\n    // Limit concurrent requests to avoid overwhelming the server\r\n    const concurrentLimit = normalizedInput.options?.concurrentLimit || 5;\r\n    const chunks: string[][] = [];\r\n    \r\n    // Split paths into chunks for concurrent processing\r\n    for (let i = 0; i < pathsToTest.length; i += concurrentLimit) {\r\n      chunks.push(pathsToTest.slice(i, i + concurrentLimit));\r\n    }\r\n    \r\n    // Process each chunk of paths\r\n    for (const chunk of chunks) {\r\n      const promises = chunk.map(path => {\r\n        const url = baseUrl + path;\r\n        \r\n        // Use GET instead of HEAD to verify actual content\r\n        return makeRequest(url, {\r\n          method: 'GET',\r\n          timeout: timeout,\r\n          headers: normalizedInput.headers\r\n        }).then(response => {\r\n          // If there was an error with the request (status will be 0)\r\n          if (response.error) {\r\n            // Just skip this path - no need to log an error for 404s and such\r\n            return;\r\n          }\r\n          \r\n          // If the file exists (2xx or 3xx status code)\r\n          if (response.status >= 200 && response.status < 400) {\r\n            let contentTypeHeader = response.headers['content-type'];\r\n            const contentType = Array.isArray(contentTypeHeader)\r\n              ? contentTypeHeader.join(', ')\r\n              : contentTypeHeader || undefined;\r\n            const contentLength = response.headers['content-length'] \r\n              ? parseInt(\r\n                  Array.isArray(response.headers['content-length'])\r\n                    ? response.headers['content-length'][0]\r\n                    : response.headers['content-length'] as string,\r\n                  10\r\n                ) \r\n              : undefined;\r\n            \r\n            // Detect false positives - check if content exists or is meaningful\r\n            const hasContent = response.data && \r\n                            (typeof response.data === 'string' ? \r\n                              response.data.length > 50 : true);\r\n            \r\n            // Check if the response contains a default page or is completely empty\r\n            const isDefaultPage = typeof response.data === 'string' && (\r\n              response.data.includes('<html') && \r\n              response.data.includes('</html>') && \r\n              (response.data.includes('<title>Index of') === false) // Not a directory listing\r\n            );\r\n            \r\n            // Modified condition to better detect false positives\r\n            // Only skip if it's both a default HTML page AND has no content length\r\n            if (isDefaultPage && !contentLength) {\r\n              return;\r\n            }\r\n            \r\n            exposedFiles.push({\r\n              path,\r\n              status: response.status,\r\n              contentType,\r\n              size: contentLength\r\n            });\r\n            \r\n            // Determine severity based on path\r\n            let severity: 'high' | 'medium' | 'low' = 'medium';\r\n            let description = `Exposed file: ${path}`;\r\n            \r\n            // Higher risk files\r\n            if (path.includes('.env') || \r\n                path.includes('config') || \r\n                path.includes('credential') || \r\n                path.includes('secret') || \r\n                path.includes('password') || \r\n                path.includes('.git/') ||\r\n                path.includes('backup') ||\r\n                path.includes('dump')) {\r\n              severity = 'high';\r\n              description = `Critical file exposed: ${path}. May contain sensitive information or credentials.`;\r\n            } \r\n            // Lower risk files\r\n            else if (path.includes('readme') || \r\n                    path.includes('robots.txt') || \r\n                    path.includes('sitemap.xml') || \r\n                    path.includes('.well-known')) {\r\n              severity = 'low';\r\n              description = `Information disclosure: ${path}. May reveal system information.`;\r\n            }\r\n            \r\n            issues.push({ severity, path, description });\r\n          }\r\n        }).catch(error => {\r\n          // Log specific errors that might indicate a bigger problem\r\n          // but still continue with the scanning process\r\n          if (normalizedInput.options?.debug) {\r\n            console.error(`Error scanning ${url}: ${error.message}`);\r\n          }\r\n        });\r\n      });\r\n      \r\n      // Wait for all promises to complete before moving to the next chunk\r\n      await Promise.all(promises);\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'sensitiveFiles',\r\n      data: {\r\n        exposedFiles,\r\n        issues\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'sensitiveFiles',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        exposedFiles: [],\r\n        issues: []\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import { ScannerInput, Scanner, SubdomainResult } from '../types';\r\nimport { makeRequest, extractDomain, createScannerInput, safeJsonParse } from '../core/request';\r\n\r\n/**\r\n * Scan for subdomains using passive techniques (Certificate Transparency logs)\r\n */\r\nexport const scanSubdomains: Scanner<SubdomainResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const domain = extractDomain(normalizedInput.target);\r\n  \r\n  try {\r\n    // Use crt.sh Certificate Transparency search\r\n    const crtShUrl = `https://crt.sh/?q=%.${domain}&output=json`;\r\n    \r\n    const response = await makeRequest(crtShUrl, {\r\n      method: 'GET',\r\n      timeout: normalizedInput.timeout || 15000, // Increase default timeout for crt.sh\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'User-Agent': 'Mozilla/5.0 (compatible; SecurityScanner/1.0)'\r\n      }\r\n    });\r\n    \r\n    if (response.error) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'subdomains',\r\n        error: `Failed to retrieve certificate data: ${response.error}`,\r\n        data: {\r\n          subdomains: [],\r\n          total: 0\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Parse the response data\r\n    let crtData: any[] = [];\r\n    \r\n    if (typeof response.data === 'string') {\r\n      try {\r\n        // Handle potential JSON formatting issues\r\n        const cleanJson = response.data.trim().replace(/\\n/g, '');\r\n        crtData = JSON.parse(cleanJson);\r\n      } catch (e) {\r\n        // Try alternate approach - sometimes crt.sh returns HTML instead of JSON\r\n        if (response.data.includes('<HTML>') || response.data.includes('<html>')) {\r\n          return {\r\n            status: 'failure',\r\n            scanner: 'subdomains',\r\n            error: 'crt.sh returned HTML instead of JSON. Try again later.',\r\n            data: {\r\n              subdomains: [],\r\n              total: 0\r\n            },\r\n            timeTaken: Date.now() - startTime\r\n          };\r\n        }\r\n        \r\n        // Log detailed error information\r\n        console.error('JSON Parse Error:', e);\r\n        console.error('Response data sample:', response.data.substring(0, 200));\r\n        \r\n        return {\r\n          status: 'failure',\r\n          scanner: 'subdomains',\r\n          error: `Failed to parse certificate data: ${(e as Error).message}`,\r\n          data: {\r\n            subdomains: [],\r\n            total: 0\r\n          },\r\n          timeTaken: Date.now() - startTime\r\n        };\r\n      }\r\n    } else if (Array.isArray(response.data)) {\r\n      crtData = response.data;\r\n    } else if (response.data && typeof response.data === 'object') {\r\n      // Handle case where data is already parsed as an object but not an array\r\n      crtData = [response.data];\r\n    }\r\n    \r\n    // Check if we actually got data\r\n    if (!crtData || crtData.length === 0) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'subdomains',\r\n        error: 'No certificate data found for this domain',\r\n        data: {\r\n          subdomains: [],\r\n          total: 0\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Extract domain names from certificates\r\n    const allDomains = new Set<string>();\r\n    \r\n    crtData.forEach((cert: any) => {\r\n      if (cert && cert.name_value) {\r\n        const name = cert.name_value.toLowerCase();\r\n        \r\n        // Handle multiple domains in one certificate (comma separated)\r\n        const domains = name.split(/[,\\s]+/);\r\n        \r\n        domains.forEach((d: string) => {\r\n          // Clean up the domain name\r\n          const cleanDomain = d.trim();\r\n          \r\n          // Only add if it's a subdomain and not the main domain\r\n          if (cleanDomain.endsWith('.' + domain) && cleanDomain !== domain) {\r\n            allDomains.add(cleanDomain);\r\n          }\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Convert to array and sort\r\n    const subdomains = Array.from(allDomains).sort();\r\n    \r\n    // Check if we should do live validation of found subdomains\r\n    if (normalizedInput.options?.checkLive === true) {\r\n      const liveSubdomains: SubdomainResult['live'] = [];\r\n      \r\n      // Test each subdomain with HEAD request (limit concurrent requests)\r\n      const concurrentLimit = normalizedInput.options?.concurrentLimit || 5;\r\n      const chunks: string[][] = [];\r\n      \r\n      // Split subdomains into chunks for concurrent processing\r\n      for (let i = 0; i < subdomains.length; i += concurrentLimit) {\r\n        chunks.push(subdomains.slice(i, i + concurrentLimit));\r\n      }\r\n      \r\n      // Process each chunk of subdomains\r\n      for (const chunk of chunks) {\r\n        const promises = chunk.map(subdomain => {\r\n          return makeRequest(`https://${subdomain}`, {\r\n            method: 'HEAD',\r\n            timeout: 5000  // Short timeout for live checks\r\n          }).then(resp => {\r\n            if (!resp.error) {\r\n              liveSubdomains.push({\r\n                domain: subdomain,\r\n                status: resp.status\r\n              });\r\n            }\r\n          }).catch(() => {\r\n            // Ignore individual request errors\r\n          });\r\n        });\r\n        \r\n        await Promise.all(promises);\r\n      }\r\n      \r\n      return {\r\n        status: 'success',\r\n        scanner: 'subdomains',\r\n        data: {\r\n          subdomains,\r\n          total: subdomains.length,\r\n          live: liveSubdomains\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'subdomains',\r\n      data: {\r\n        subdomains,\r\n        total: subdomains.length\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'subdomains',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        subdomains: [],\r\n        total: 0\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import { ScannerInput, Scanner, TechStackResult } from '../types';\r\nimport { makeRequest, createScannerInput } from '../core/request';\r\n\r\n// Technology detection patterns\r\nconst TECH_PATTERNS = {\r\n  // Front-end Frameworks\r\n  'React': {\r\n    patterns: ['react.js', 'react-dom', 'reactjs', '\"react\"', '_reactjs_', 'react.production.min.js', 'react.development.js'],\r\n    category: 'Web Frameworks',\r\n    language: 'JavaScript'\r\n  },\r\n  'Vue.js': {\r\n    patterns: ['vue.js', 'vue@', 'vue.min.js', 'vue.runtime', 'vue.common', 'vue.esm'],\r\n    category: 'Web Frameworks',\r\n    language: 'JavaScript'\r\n  },\r\n  'Angular': {\r\n    patterns: ['angular.js', 'ng-app', 'ng-controller', 'angular.min.js', 'angular/core', '@angular'],\r\n    category: 'Web Frameworks',\r\n    language: 'JavaScript'\r\n  },\r\n  'jQuery': {\r\n    patterns: ['jquery.js', 'jquery.min.js', '/jquery-', 'jquery/jquery', 'code.jquery'],\r\n    category: 'JavaScript Libraries',\r\n    language: 'JavaScript'\r\n  },\r\n  'Bootstrap': {\r\n    patterns: ['bootstrap.css', 'bootstrap.min.css', 'bootstrap.bundle', 'bootstrap/dist', 'class=\"container\"', 'class=\"row\"', 'class=\"col-'],\r\n    category: 'Web Frameworks',\r\n    language: 'CSS'\r\n  },\r\n  'Tailwind CSS': {\r\n    patterns: [\r\n      'tailwind.css', \r\n      'tailwindcss', \r\n      'tailwind.min.css', \r\n      'class=\"tw-',\r\n      'class=\"bg-', \r\n      'class=\"text-', \r\n      'class=\"flex',\r\n      '/tailwind/',\r\n      'tailwind.config.js',\r\n      '@tailwind base',\r\n      'tailwindcss/dist'\r\n    ],\r\n    category: 'CSS Frameworks',\r\n    language: 'CSS'\r\n  },\r\n  'Nuxt.js': {\r\n    patterns: [\r\n      '__NUXT__',\r\n      '/_nuxt/',\r\n      '<nuxt-link',\r\n      '\"nuxt\":',\r\n      '@nuxtjs',\r\n      'Nuxt.js',\r\n      'window.$nuxt',\r\n      'nuxt.config.js',\r\n      '/_nuxt/commons.',\r\n      'data-n-head',\r\n      '<div id=\"__nuxt\"'\r\n    ],\r\n    category: 'Web Frameworks',\r\n    language: 'JavaScript'\r\n  },\r\n  'Next.js': {\r\n    patterns: ['next.js', '__NEXT_DATA__', '/_next/', '\"next\":', 'next/link'],\r\n    category: 'Web Frameworks',\r\n    language: 'JavaScript'\r\n  },\r\n  \r\n  // CMS\r\n  'WordPress': {\r\n    patterns: ['wp-content', 'wp-includes', 'wordpress', 'wp-json'],\r\n    category: 'CMS',\r\n    language: 'PHP'\r\n  },\r\n  'Drupal': {\r\n    patterns: ['Drupal.settings', '/sites/default/files', 'drupal.js'],\r\n    category: 'CMS',\r\n    language: 'PHP'\r\n  },\r\n  'Joomla': {\r\n    patterns: ['/administrator/index.php', 'joomla', 'com_content'],\r\n    category: 'CMS',\r\n    language: 'PHP'\r\n  },\r\n  'Shopify': {\r\n    patterns: ['Shopify.', 'shopify', '.myshopify.com'],\r\n    category: 'Ecommerce',\r\n    language: 'Ruby'\r\n  },\r\n  'Magento': {\r\n    patterns: ['magento', 'Mage.', '/skin/frontend/'],\r\n    category: 'Ecommerce',\r\n    language: 'PHP'\r\n  },\r\n  'WooCommerce': {\r\n    patterns: ['woocommerce', 'wc-api', 'wc_add_to_cart'],\r\n    category: 'Ecommerce',\r\n    language: 'PHP'\r\n  },\r\n  \r\n  // Back-end Technologies  \r\n  'Laravel': {\r\n    patterns: [\r\n      // More specific Laravel patterns\r\n      'laravel_session=',\r\n      'XSRF-TOKEN',\r\n      'X-XSRF-TOKEN',\r\n      'Laravel Framework',\r\n      'laravel.js',\r\n      '/laravel/',\r\n      'app/Http/Controllers',\r\n      'Illuminate\\\\',\r\n      'laravel.mix'\r\n    ],\r\n    category: 'Web Frameworks',\r\n    language: 'PHP'\r\n  },\r\n  'Express.js': {\r\n    patterns: ['express', 'express.js', 'expressjs'],\r\n    category: 'Web Frameworks',\r\n    language: 'JavaScript'\r\n  },\r\n  'Django': {\r\n    patterns: ['django', 'csrftoken', 'csrfmiddlewaretoken'],\r\n    category: 'Web Frameworks',\r\n    language: 'Python'\r\n  },\r\n  'Ruby on Rails': {\r\n    patterns: ['rails', 'ruby on rails', 'csrf-token'],\r\n    category: 'Web Frameworks',\r\n    language: 'Ruby'\r\n  },\r\n  'ASP.NET': {\r\n    patterns: [\r\n      // More specific ASP.NET patterns\r\n      '__VIEWSTATE',\r\n      '__EVENTVALIDATION',\r\n      '.aspx',\r\n      '.ashx',\r\n      '.asmx',\r\n      'ASP.NET_SessionId',\r\n      'X-AspNet-Version',\r\n      'X-AspNetMvc-Version'\r\n    ],\r\n    category: 'Web Frameworks',\r\n    language: 'C#'\r\n  },\r\n  'Spring': {\r\n    patterns: ['spring', 'spring.js', 'org.springframework'],\r\n    category: 'Web Frameworks',\r\n    language: 'Java'\r\n  },\r\n  \r\n  // Web Servers\r\n  'Apache': {\r\n    patterns: ['apache', 'apache/'],\r\n    category: 'Web Servers',\r\n    language: ''\r\n  },\r\n  'Nginx': {\r\n    patterns: ['nginx'],\r\n    category: 'Web Servers',\r\n    language: ''\r\n  },\r\n  'IIS': {\r\n    patterns: ['iis', 'microsoft-iis', 'ms-iis'],\r\n    category: 'Web Servers',\r\n    language: ''\r\n  },\r\n  'Cloudflare': {\r\n    patterns: ['cloudflare', 'cf-ray', '__cfduid'],\r\n    category: 'CDN',\r\n    language: ''\r\n  },\r\n  'Litespeed': {\r\n    patterns: ['litespeed'],\r\n    category: 'Web Servers',\r\n    language: ''\r\n  },\r\n  \r\n  // Languages\r\n  'PHP': {\r\n    patterns: [\r\n      // More specific PHP patterns to reduce false positives\r\n      '/index.php', \r\n      'phpinfo()', \r\n      'php_version', \r\n      'PHPSESSID=',\r\n      'content=\"php\"', \r\n      'Powered by PHP', \r\n      '.php?'\r\n    ],\r\n    category: 'Programming Languages',\r\n    language: 'PHP'\r\n  },\r\n  'Node.js': {\r\n    patterns: ['node.js', 'nodejs', 'node_modules'],\r\n    category: 'Programming Languages',\r\n    language: 'JavaScript'\r\n  },\r\n  'Python': {\r\n    patterns: [\r\n      // More specific Python patterns\r\n      'python-requests', \r\n      'wsgi.py',\r\n      'django.contrib',\r\n      '.py?',\r\n      'PYTHONPATH',\r\n      'content=\"python\"',\r\n      'Powered by Python'\r\n    ],\r\n    category: 'Programming Languages',\r\n    language: 'Python'\r\n  },\r\n  'Ruby': {\r\n    patterns: ['ruby', '.rb', 'ruby on'],\r\n    category: 'Programming Languages',\r\n    language: 'Ruby'\r\n  },\r\n  'Java': {\r\n    patterns: ['java', '.jsp', '.jar'],\r\n    category: 'Programming Languages',\r\n    language: 'Java'\r\n  }\r\n};\r\n\r\n/**\r\n * Enhanced tech detection using pattern matching\r\n */\r\nfunction detectTechByPatterns(html: string, headers: Record<string, string | string[]>): {\r\n  technologies: Array<{name: string; categories: string[]; confidence: number; version?: string}>;\r\n  frameworks: string[];\r\n  languages: string[];\r\n  servers: string[];\r\n} {\r\n  const technologies: Array<{name: string; categories: string[]; confidence: number; version?: string}> = [];\r\n  const frameworks: Set<string> = new Set();\r\n  const languages: Set<string> = new Set();\r\n  const servers: Set<string> = new Set();\r\n  \r\n  // Convert headers to string for easier search\r\n  const headersString = JSON.stringify(headers).toLowerCase();\r\n  \r\n  // Minimum confidence threshold required to include a technology\r\n  const MIN_CONFIDENCE_THRESHOLD = 40;\r\n  \r\n  // Stronger weight for some pattern matches that are more definitive\r\n  const STRONG_PATTERN_INDICATORS = [\r\n    '__VIEWSTATE', // ASP.NET\r\n    'PHPSESSID', // PHP\r\n    'laravel_session=', // Laravel\r\n    'wp-content', // WordPress\r\n    'class=\"container\"', // Bootstrap\r\n    '/tailwind' // Tailwind\r\n  ];\r\n  \r\n  // Detect technologies by patterns\r\n  Object.entries(TECH_PATTERNS).forEach(([techName, techInfo]) => {\r\n    // Calculate a score based on how many patterns are found\r\n    let matchCount = 0;\r\n    let strongMatchFound = false;\r\n    let headerMatchFound = false;\r\n    const htmlLower = html.toLowerCase();\r\n    \r\n    for (const pattern of techInfo.patterns) {\r\n      const patternLower = pattern.toLowerCase();\r\n      \r\n      // Check in HTML content\r\n      if (htmlLower.includes(patternLower)) {\r\n        matchCount++;\r\n        \r\n        // Check if this is a strong indicator\r\n        if (STRONG_PATTERN_INDICATORS.some(indicator => \r\n            patternLower.includes(indicator.toLowerCase()))) {\r\n          strongMatchFound = true;\r\n          matchCount += 2; // Bonus points for strong indicators\r\n        }\r\n      }\r\n      \r\n      // Check in headers\r\n      if (headersString.includes(patternLower)) {\r\n        headerMatchFound = true;\r\n        matchCount += 2; // Headers are more reliable indicators\r\n      }\r\n    }\r\n    \r\n    // Adjust confidence calculation based on match strength\r\n    let confidence = 0;\r\n    \r\n    if (matchCount > 0) {\r\n      // Base confidence on matches\r\n      confidence = Math.min(100, matchCount * 20); \r\n      \r\n      // Bonus for header matches (very reliable)\r\n      if (headerMatchFound) {\r\n        confidence = Math.min(100, confidence + 30);\r\n      }\r\n      \r\n      // Bonus for strong indicator matches\r\n      if (strongMatchFound) {\r\n        confidence = Math.min(100, confidence + 20);\r\n      }\r\n      \r\n      // Only add technologies that meet the minimum confidence threshold\r\n      if (confidence >= MIN_CONFIDENCE_THRESHOLD) {\r\n        technologies.push({\r\n          name: techName,\r\n          categories: [techInfo.category],\r\n          confidence: confidence\r\n        });\r\n        \r\n        // Add to specific categories\r\n        if (techInfo.category === 'Web Frameworks') {\r\n          frameworks.add(techName);\r\n        }\r\n        \r\n        if (techInfo.category === 'Web Servers') {\r\n          servers.add(techName);\r\n        }\r\n        \r\n        // Add associated language if present and confidence is high enough\r\n        if (techInfo.language && confidence >= 60) {\r\n          languages.add(techInfo.language);\r\n        }\r\n      }\r\n    }\r\n  });\r\n  \r\n  // Additional header-based detection\r\n  \r\n  // Server detection\r\n  if (headers['server']) {\r\n    const serverHeader = Array.isArray(headers['server']) \r\n      ? headers['server'][0] \r\n      : headers['server'];\r\n    \r\n    servers.add(serverHeader);\r\n    \r\n    if (!technologies.some(t => t.name === serverHeader)) {\r\n      technologies.push({\r\n        name: serverHeader,\r\n        categories: ['Web Servers'],\r\n        confidence: 100\r\n      });\r\n    }\r\n  }\r\n  \r\n  // X-Powered-By detection\r\n  if (headers['x-powered-by']) {\r\n    const poweredBy = Array.isArray(headers['x-powered-by']) \r\n      ? headers['x-powered-by'][0] \r\n      : headers['x-powered-by'];\r\n    \r\n    const poweredByParts = poweredBy.split(', ');\r\n    \r\n    poweredByParts.forEach(tech => {\r\n      if (!technologies.some(t => t.name === tech)) {\r\n        technologies.push({\r\n          name: tech,\r\n          categories: ['Web Frameworks'],\r\n          confidence: 90 // High but not absolute confidence\r\n        });\r\n      }\r\n      \r\n      // Extract specific technologies from X-Powered-By with verification\r\n      const techLower = tech.toLowerCase();\r\n      \r\n      // Only add PHP if specifically mentioned in x-powered-by\r\n      if (techLower.includes('php/') || techLower === 'php') {\r\n        languages.add('PHP');\r\n        \r\n        // Look for version information\r\n        const phpVersionMatch = techLower.match(/php\\/([0-9.]+)/i);\r\n        if (phpVersionMatch && !technologies.some(t => t.name === 'PHP')) {\r\n          technologies.push({\r\n            name: 'PHP',\r\n            version: phpVersionMatch[1],\r\n            categories: ['Programming Languages'],\r\n            confidence: 95\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Only add ASP.NET if specifically mentioned\r\n      if (techLower === 'asp.net' || techLower.includes('asp.net/')) {\r\n        frameworks.add('ASP.NET');\r\n        languages.add('C#');\r\n        \r\n        // Look for explicit version\r\n        const aspVersionMatch = techLower.match(/asp\\.net[/\\s]+([0-9.]+)/i);\r\n        if (aspVersionMatch && !technologies.some(t => t.name === 'ASP.NET')) {\r\n          technologies.push({\r\n            name: 'ASP.NET',\r\n            version: aspVersionMatch[1],\r\n            categories: ['Web Frameworks'],\r\n            confidence: 95\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Explicit framework mentions\r\n      if (techLower.includes('express/')) frameworks.add('Express.js');\r\n      if (techLower.includes('node/')) languages.add('JavaScript');\r\n      if (techLower.includes('nuxt/')) frameworks.add('Nuxt.js');\r\n    });\r\n  }\r\n  \r\n  // Extract generator meta tag\r\n  const generatorMatch = html.match(/<meta\\s+name=[\"']generator[\"']\\s+content=[\"']([^\"']+)[\"']/i);\r\n  if (generatorMatch && generatorMatch[1]) {\r\n    const generator = generatorMatch[1];\r\n    \r\n    if (!technologies.some(t => t.name === generator)) {\r\n      technologies.push({\r\n        name: generator,\r\n        categories: ['CMS'],\r\n        confidence: 100\r\n      });\r\n    }\r\n    \r\n    // Extract CMS from generator\r\n    const generatorLower = generator.toLowerCase();\r\n    if (generatorLower.includes('wordpress')) {\r\n      frameworks.add('WordPress');\r\n      languages.add('PHP');\r\n    }\r\n    if (generatorLower.includes('drupal')) {\r\n      frameworks.add('Drupal');\r\n      languages.add('PHP');\r\n    }\r\n    if (generatorLower.includes('joomla')) {\r\n      frameworks.add('Joomla');\r\n      languages.add('PHP');\r\n    }\r\n  }\r\n  \r\n  return {\r\n    technologies,\r\n    frameworks: Array.from(frameworks),\r\n    languages: Array.from(languages),\r\n    servers: Array.from(servers)\r\n  };\r\n}\r\n\r\n/**\r\n * Validates and filters technology detection results\r\n * to remove low-confidence and duplicate entries\r\n */\r\nfunction validateAndCleanResults(results: {\r\n  technologies: Array<{name: string; categories: string[]; confidence: number; version?: string}>;\r\n  frameworks: string[];\r\n  languages: string[];\r\n  servers: string[];\r\n}) {\r\n  // Filter out low confidence technologies\r\n  results.technologies = results.technologies.filter(tech => tech.confidence >= 50);\r\n  \r\n  // De-duplicate technologies\r\n  const techMap = new Map();\r\n  results.technologies.forEach(tech => {\r\n    const existingTech = techMap.get(tech.name);\r\n    if (!existingTech || existingTech.confidence < tech.confidence) {\r\n      techMap.set(tech.name, tech);\r\n    }\r\n  });\r\n  results.technologies = Array.from(techMap.values());\r\n  \r\n  // Remove duplicate frameworks and ensure each exists in the technologies list\r\n  results.frameworks = [...new Set(results.frameworks)].filter(framework => \r\n    results.technologies.some(tech => tech.name === framework || \r\n    // Handle Nuxt/Nuxt.js variation\r\n    (tech.name === 'Nuxt.js' && framework === 'Nuxt') ||\r\n    (tech.name === 'Nuxt' && framework === 'Nuxt.js'))\r\n  );\r\n  \r\n  // Remove duplicate languages and validate against technologies\r\n  const languagesWithTech = results.languages.filter(lang => {\r\n    // Keep languages that have explicit technology matches\r\n    return results.technologies.some(tech => \r\n      tech.categories.includes('Programming Languages') && tech.name === lang);\r\n  });\r\n  \r\n  // Get languages from frameworks too (only highly confident ones)\r\n  const languagesFromFrameworks = results.technologies\r\n    .filter(tech => tech.categories.includes('Web Frameworks') && tech.confidence >= 75)\r\n    .map(tech => {\r\n      // Map frameworks to their typical languages\r\n      switch(tech.name) {\r\n        case 'ASP.NET': return 'C#';\r\n        case 'Laravel': return 'PHP';\r\n        case 'Django': return 'Python';\r\n        case 'Nuxt.js': case 'Nuxt': case 'Vue.js': case 'React': case 'Angular': \r\n          return 'JavaScript';\r\n        case 'Ruby on Rails': return 'Ruby';\r\n        case 'Spring': return 'Java';\r\n        default: return null;\r\n      }\r\n    })\r\n    .filter(Boolean) as string[];\r\n  \r\n  // Combine and de-duplicate languages\r\n  results.languages = [...new Set([...languagesWithTech, ...languagesFromFrameworks])];\r\n  \r\n  // Remove duplicate servers and validate\r\n  results.servers = [...new Set(results.servers)].filter(server => \r\n    results.technologies.some(tech => tech.name === server || \r\n    // Handle IIS/Microsoft-IIS variation\r\n    (tech.name.toLowerCase().includes('iis') && server.toLowerCase().includes('iis')))\r\n  );\r\n  \r\n  return results;\r\n}\r\n\r\n/**\r\n * Detect technologies used on a website\r\n */\r\nexport const detectTechStack: Scanner<TechStackResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  \r\n  try {\r\n    // Import wappalyzer is done dynamically to handle both frontend/backend cases\r\n    const Wappalyzer: any = {\r\n      analyze: async () => []\r\n    };\r\n    let usingFallbackDetection = true;\r\n    \r\n    try {\r\n      // This will work in Node.js environment\r\n      // Use dynamic import for Node.js environments\r\n      if (typeof window === 'undefined') {\r\n        try {\r\n          // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n          const wappalyzerCore = require('wappalyzer-core');\r\n          if (wappalyzerCore && typeof wappalyzerCore.analyze === 'function') {\r\n            // If available, use the real Wappalyzer\r\n            Object.assign(Wappalyzer, wappalyzerCore);\r\n            usingFallbackDetection = false;\r\n          }\r\n        } catch (err) {\r\n          // Wappalyzer not installed, use fallback detection\r\n          usingFallbackDetection = true;\r\n        }\r\n      } else {\r\n        usingFallbackDetection = true;\r\n      }\r\n    } catch (e) {\r\n      usingFallbackDetection = true;\r\n    }\r\n    \r\n    // Make multiple requests to capture more context\r\n    const mainPageRequest = makeRequest(normalizedInput.target, {\r\n      method: 'GET',\r\n      timeout: normalizedInput.timeout,\r\n      headers: normalizedInput.headers\r\n    });\r\n      // Also try to fetch common JS files that might reveal technologies\r\n    const defaultTimeout = normalizedInput.timeout || 10000;\r\n    const jsRequest = makeRequest(`${normalizedInput.target}/main.js`, {\r\n      method: 'GET',\r\n      timeout: defaultTimeout / 2, // Shorter timeout for auxiliary requests\r\n      headers: normalizedInput.headers\r\n    }).catch(() => ({ data: '', headers: {}, status: 0, error: null }));\r\n    \r\n    const cssRequest = makeRequest(`${normalizedInput.target}/main.css`, {\r\n      method: 'GET',\r\n      timeout: defaultTimeout / 2,\r\n      headers: normalizedInput.headers\r\n    }).catch(() => ({ data: '', headers: {}, status: 0, error: null }));\r\n    \r\n    // Wait for the main page response\r\n    const response = await mainPageRequest;\r\n    const [jsResponse, cssResponse] = await Promise.all([jsRequest, cssRequest]);\r\n    \r\n    if (response.error || !response.data) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'techStack',\r\n        error: response.error || 'Failed to retrieve website content',\r\n        data: {\r\n          technologies: [],\r\n          frameworks: [],\r\n          languages: [],\r\n          servers: []\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Combine HTML from main page with JS and CSS for better detection\r\n    let html = typeof response.data === 'string' ? response.data : String(response.data);\r\n    const jsContent = typeof jsResponse.data === 'string' ? jsResponse.data : String(jsResponse.data || '');\r\n    const cssContent = typeof cssResponse.data === 'string' ? cssResponse.data : String(cssResponse.data || '');\r\n    \r\n    // Combine all content for pattern matching\r\n    const combinedContent = html + ' ' + jsContent + ' ' + cssContent;\r\n    const headers = response.headers;\r\n    \r\n    let technologies: Array<{\r\n      name: string;\r\n      version?: string;\r\n      categories: string[];\r\n      confidence: number;\r\n    }> = [];\r\n    \r\n    let frameworks: string[] = [];\r\n    let languages: string[] = [];\r\n    let servers: string[] = [];\r\n    \r\n    if (!usingFallbackDetection) {\r\n      // Use Wappalyzer when available\r\n      const wappalyzerInput = {\r\n        url: normalizedInput.target,\r\n        html,\r\n        headers: headers\r\n      };\r\n      \r\n      // Analyze with Wappalyzer\r\n      const detectedTechnologies = await Wappalyzer.analyze(wappalyzerInput);\r\n      \r\n      // Process results\r\n      technologies = detectedTechnologies.map((tech: any) => ({\r\n        name: tech.name,\r\n        version: tech.version,\r\n        categories: tech.categories.map((cat: any) => cat.name),\r\n        confidence: tech.confidence\r\n      }));\r\n      \r\n      // Extract frameworks, languages, servers\r\n      technologies.forEach((tech: { \r\n        name: string; \r\n        categories: string[]; \r\n      }) => {\r\n        if (tech.categories.includes('Web Frameworks')) {\r\n          frameworks.push(tech.name);\r\n        }\r\n        \r\n        if (tech.categories.includes('Programming Languages')) {\r\n          languages.push(tech.name);\r\n        }\r\n        \r\n        if (tech.categories.includes('Web Servers')) {\r\n          servers.push(tech.name);\r\n        }\r\n      });\r\n      \r\n      // If Wappalyzer didn't find anything, fall back to our pattern detection\r\n      if (technologies.length === 0) {\r\n        usingFallbackDetection = true;\r\n      }\r\n    }\r\n    \r\n    // Use our pattern-based detection if Wappalyzer didn't work or found nothing\r\n    if (usingFallbackDetection) {\r\n      const patternResults = detectTechByPatterns(combinedContent, headers);\r\n      technologies = patternResults.technologies;\r\n      frameworks = patternResults.frameworks;\r\n      languages = patternResults.languages;\r\n      servers = patternResults.servers;\r\n    }\r\n    \r\n    // Validate and clean up results to improve accuracy\r\n    const cleanedResults = validateAndCleanResults({\r\n      technologies,\r\n      frameworks,\r\n      languages,\r\n      servers\r\n    });\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'techStack',\r\n      data: {\r\n        technologies: cleanedResults.technologies,\r\n        frameworks: cleanedResults.frameworks,\r\n        languages: cleanedResults.languages,\r\n        servers: cleanedResults.servers\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'techStack',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        technologies: [],\r\n        frameworks: [],\r\n        languages: [],\r\n        servers: []\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import { LibraryVulnerabilityResult, Scanner, ScannerInput } from '../types';\r\nimport { makeRequest, createScannerInput } from '../core/request';\r\n\r\ninterface RetireJsVuln {\r\n  identifiers: {\r\n    CVE?: string[];\r\n    [key: string]: string[] | undefined;\r\n  };\r\n  severity: string;\r\n  info: string[];\r\n}\r\n\r\ninterface RetireJsResult {\r\n  version: string;\r\n  component: string;\r\n  vulnerabilities?: RetireJsVuln[];\r\n}\r\n\r\n// Common CDN patterns to detect libraries\r\nconst COMMON_LIBRARIES = [\r\n  { name: 'jQuery', regex: /jquery[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'Bootstrap', regex: /bootstrap[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.(?:js|css)/i },\r\n  { name: 'React', regex: /react[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'Angular', regex: /angular[-.]?(?:core[\\./])?(\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'Vue', regex: /vue(?:\\.esm)?[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'Lodash', regex: /lodash(?:\\.core)?[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'Moment', regex: /moment[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'D3', regex: /d3(?:\\.v\\d)?[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n  { name: 'Axios', regex: /axios[-.](\\d+\\.\\d+\\.\\d+)(?:\\.min)?\\.js/i },\r\n];\r\n\r\n// List of additional vulnerability data sources\r\nconst VULNERABILITY_SOURCES = [\r\n  'https://raw.githubusercontent.com/RetireJS/retire.js/master/repository/jsrepository.json',\r\n  // Snyk doesn't provide direct JSON access, so we'll stick with RetireJS for now\r\n  // Additional open source vulnerability sources could be added here\r\n];\r\n\r\n/**\r\n * Scan for vulnerable JavaScript libraries using Retire.js data and additional techniques\r\n */\r\nexport const scanLibraryVulnerabilities: Scanner<LibraryVulnerabilityResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  \r\n  try {\r\n    // Fetch Retire.js vulnerability database\r\n    const retireDbUrl = 'https://raw.githubusercontent.com/RetireJS/retire.js/master/repository/jsrepository.json';\r\n    \r\n    const dbResponse = await makeRequest(retireDbUrl, {\r\n      timeout: normalizedInput.timeout || 15000\r\n    });\r\n    \r\n    if (dbResponse.error || !dbResponse.data) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'libraryVulnerabilities',\r\n        error: dbResponse.error || 'Failed to retrieve vulnerability database',\r\n        data: {\r\n          vulnerableLibs: [],\r\n          totalVulnerabilities: 0\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Parse vulnerability database\r\n    let vulnerabilityDb: Record<string, any>;\r\n    if (typeof dbResponse.data === 'string') {\r\n      try {\r\n        vulnerabilityDb = JSON.parse(dbResponse.data);\r\n      } catch (e) {\r\n        return {\r\n          status: 'failure',\r\n          scanner: 'libraryVulnerabilities',\r\n          error: 'Failed to parse vulnerability database',\r\n          data: {\r\n            vulnerableLibs: [],\r\n            totalVulnerabilities: 0\r\n          },\r\n          timeTaken: Date.now() - startTime\r\n        };\r\n      }\r\n    } else {\r\n      vulnerabilityDb = dbResponse.data;\r\n    }\r\n    \r\n    // Get HTML content to scan\r\n    let html: string;\r\n    \r\n    if (normalizedInput.options?.html) {\r\n      html = normalizedInput.options.html;\r\n    } else {\r\n      // Make a request to get the HTML\r\n      const response = await makeRequest(normalizedInput.target, {\r\n        method: 'GET',\r\n        timeout: normalizedInput.timeout || 10000,\r\n        headers: {\r\n          ...normalizedInput.headers,\r\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36'\r\n        }\r\n      });\r\n      \r\n      if (response.error || !response.data) {\r\n        return {\r\n          status: 'failure',\r\n          scanner: 'libraryVulnerabilities',\r\n          error: response.error || 'Failed to retrieve website content',\r\n          data: {\r\n            vulnerableLibs: [],\r\n            totalVulnerabilities: 0\r\n          },\r\n          timeTaken: Date.now() - startTime\r\n        };\r\n      }\r\n      \r\n      html = typeof response.data === 'string' ? response.data : String(response.data);\r\n    }\r\n    \r\n    // Extract script URLs using regex\r\n    const scriptRegex = /<script[^>]*src=[\"']([^\"']+)[\"'][^>]*>/g;\r\n    let match;\r\n    const scriptUrls: string[] = [];\r\n    \r\n    while ((match = scriptRegex.exec(html)) !== null) {\r\n      let url = match[1];\r\n      \r\n      // Make relative URLs absolute\r\n      if (url.startsWith('/') && !url.startsWith('//')) {\r\n        const baseUrl = new URL(normalizedInput.target);\r\n        url = baseUrl.origin + url;\r\n      } else if (!url.startsWith('http') && !url.startsWith('//')) {\r\n        const baseUrl = new URL(normalizedInput.target);\r\n        url = baseUrl.href.replace(/\\/$/, '') + '/' + url;\r\n      } else if (url.startsWith('//')) {\r\n        url = 'https:' + url;\r\n      }\r\n      \r\n      scriptUrls.push(url);\r\n    }\r\n    \r\n    // Also extract style URLs for CSS frameworks\r\n    const styleRegex = /<link[^>]*rel=[\"']stylesheet[\"'][^>]*href=[\"']([^\"']+)[\"'][^>]*>/g;\r\n    while ((match = styleRegex.exec(html)) !== null) {\r\n      let url = match[1];\r\n      \r\n      // Make relative URLs absolute\r\n      if (url.startsWith('/') && !url.startsWith('//')) {\r\n        const baseUrl = new URL(normalizedInput.target);\r\n        url = baseUrl.origin + url;\r\n      } else if (!url.startsWith('http') && !url.startsWith('//')) {\r\n        const baseUrl = new URL(normalizedInput.target);\r\n        url = baseUrl.href.replace(/\\/$/, '') + '/' + url;\r\n      } else if (url.startsWith('//')) {\r\n        url = 'https:' + url;\r\n      }\r\n      \r\n      scriptUrls.push(url); // Add to same list for processing\r\n    }\r\n    \r\n    // Also extract inline script content for identification\r\n    const inlineScriptRegex = /<script[^>]*>([\\s\\S]*?)<\\/script>/g;\r\n    const inlineScripts: string[] = [];\r\n    \r\n    while ((match = inlineScriptRegex.exec(html)) !== null) {\r\n      if (match[1].trim()) {\r\n        inlineScripts.push(match[1]);\r\n      }\r\n    }\r\n    \r\n    // Analyze script URLs for known libraries\r\n    const vulnerableLibs: LibraryVulnerabilityResult['vulnerableLibs'] = [];\r\n    const detectedLibs: Map<string, string> = new Map(); // Store all detected libs for reporting\r\n    \r\n    // Function to check URL for library indicators\r\n    const checkUrlForLibrary = async (url: string) => {\r\n      // First check URL against common library patterns\r\n      for (const lib of COMMON_LIBRARIES) {\r\n        const match = url.match(lib.regex);\r\n        if (match && match[1]) {\r\n          const version = match[1];\r\n          detectedLibs.set(lib.name, version);\r\n        }\r\n      }\r\n      \r\n      // Then check against RetireJS database\r\n      Object.keys(vulnerabilityDb).forEach(libName => {\r\n        const lib = vulnerabilityDb[libName];\r\n        \r\n        if (lib.extractors && lib.extractors.uri) {\r\n          lib.extractors.uri.forEach((pattern: string) => {\r\n            try {\r\n              const regex = new RegExp(pattern);\r\n              const match = url.match(regex);\r\n              \r\n              if (match) {\r\n                // Try to extract version from URL\r\n                let version = '';\r\n                \r\n                if (match.length > 1) {\r\n                  version = match[1];\r\n                }\r\n                \r\n                // Store in detected libs\r\n                detectedLibs.set(libName, version);\r\n                \r\n                // Check if this version has vulnerabilities\r\n                const vulnerabilities = findLibraryVulnerabilities(lib, version);\r\n                \r\n                if (vulnerabilities.length > 0) {\r\n                  const existingLib = vulnerableLibs.find(l => \r\n                    l.name === libName && l.version === version);\r\n                  \r\n                  if (!existingLib) {\r\n                    vulnerableLibs.push({\r\n                      name: libName,\r\n                      version: version,\r\n                      vulnerabilities: vulnerabilities\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n            } catch (e) {\r\n              // Skip invalid regex patterns\r\n            }\r\n          });\r\n        }\r\n      });\r\n      \r\n      // For certain CDNs, try to fetch the actual script content\r\n      if (url.includes('cdn.') || url.includes('.min.js')) {\r\n        try {\r\n          // Only fetch JS files, not CSS\r\n          if (url.endsWith('.js') || !url.includes('.')) {\r\n            const scriptContent = await makeRequest(url, {\r\n              timeout: 5000 // Short timeout for external resources\r\n            }).then(r => typeof r.data === 'string' ? r.data : String(r.data))\r\n              .catch(() => ''); // Ignore failures\r\n              \r\n            if (scriptContent) {\r\n              // Check content for library signatures\r\n              Object.keys(vulnerabilityDb).forEach(libName => {\r\n                const lib = vulnerabilityDb[libName];\r\n                \r\n                if (lib.extractors && lib.extractors.filecontent) {\r\n                  lib.extractors.filecontent.forEach((pattern: string) => {\r\n                    try {\r\n                      const regex = new RegExp(pattern);\r\n                      const match = scriptContent.match(regex);\r\n                      \r\n                      if (match) {\r\n                        // Try to extract version\r\n                        let version = '';\r\n                        \r\n                        if (match.length > 1) {\r\n                          version = match[1];\r\n                        }\r\n                        \r\n                        // Store in detected libs\r\n                        detectedLibs.set(libName, version);\r\n                        \r\n                        // Check if this version has vulnerabilities\r\n                        const vulnerabilities = findLibraryVulnerabilities(lib, version);\r\n                        \r\n                        if (vulnerabilities.length > 0) {\r\n                          const existingLib = vulnerableLibs.find(l => \r\n                            l.name === libName && l.version === version);\r\n                          \r\n                          if (!existingLib) {\r\n                            vulnerableLibs.push({\r\n                              name: libName,\r\n                              version: version,\r\n                              vulnerabilities: vulnerabilities\r\n                            });\r\n                          }\r\n                        }\r\n                      }\r\n                    } catch (e) {\r\n                      // Skip invalid regex patterns\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            }\r\n          }\r\n        } catch (e) {\r\n          // Ignore errors fetching external scripts\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Process script URLs - limit concurrency to avoid overwhelming the server\r\n    const concurrentLimit = normalizedInput.options?.concurrentLimit || 5;\r\n    const chunks: string[][] = [];\r\n    \r\n    // Split URLs into chunks for concurrent processing\r\n    for (let i = 0; i < scriptUrls.length; i += concurrentLimit) {\r\n      chunks.push(scriptUrls.slice(i, i + concurrentLimit));\r\n    }\r\n    \r\n    // Process each chunk of URLs\r\n    for (const chunk of chunks) {\r\n      await Promise.all(chunk.map(url => checkUrlForLibrary(url)));\r\n    }\r\n    \r\n    // Process inline scripts\r\n    for (const script of inlineScripts) {\r\n      // Check for library signature in inline scripts\r\n      Object.keys(vulnerabilityDb).forEach(libName => {\r\n        const lib = vulnerabilityDb[libName];\r\n        \r\n        if (lib.extractors && lib.extractors.filecontent) {\r\n          lib.extractors.filecontent.forEach((pattern: string) => {\r\n            try {\r\n              const regex = new RegExp(pattern);\r\n              const match = script.match(regex);\r\n              \r\n              if (match) {\r\n                // Try to extract version\r\n                let version = '';\r\n                \r\n                if (match.length > 1) {\r\n                  version = match[1];\r\n                }\r\n                \r\n                // Store in detected libs\r\n                detectedLibs.set(libName, version);\r\n                \r\n                // Check if this version has vulnerabilities\r\n                const vulnerabilities = findLibraryVulnerabilities(lib, version);\r\n                \r\n                if (vulnerabilities.length > 0) {\r\n                  // Check if we already found this library\r\n                  const existingLib = vulnerableLibs.find(lib => \r\n                    lib.name === libName && lib.version === version);\r\n                \r\n                  if (!existingLib) {\r\n                    vulnerableLibs.push({\r\n                      name: libName,\r\n                      version: version,\r\n                      vulnerabilities: vulnerabilities\r\n                    });\r\n                  }\r\n                }\r\n              }\r\n            } catch (e) {\r\n              // Skip invalid regex patterns\r\n            }\r\n          });\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Count total vulnerabilities\r\n    const totalVulnerabilities = vulnerableLibs.reduce(\r\n      (total, lib) => total + lib.vulnerabilities.length, 0\r\n    );\r\n    \r\n    // Add detected libraries info in the response if requested\r\n    let result: any = {\r\n      vulnerableLibs,\r\n      totalVulnerabilities\r\n    };\r\n    \r\n    // Include all detected libraries if requested\r\n    if (normalizedInput.options?.includeAllLibraries) {\r\n      result.detectedLibraries = Array.from(detectedLibs.entries()).map(([name, version]) => ({\r\n        name,\r\n        version\r\n      }));\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'libraryVulnerabilities',\r\n      data: result,\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'libraryVulnerabilities',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        vulnerableLibs: [],\r\n        totalVulnerabilities: 0\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Helper function to find vulnerabilities for a specific library version\r\n */\r\nfunction findLibraryVulnerabilities(\r\n  lib: any,\r\n  version: string\r\n): { id: string; severity: 'high' | 'medium' | 'low'; info: string }[] {\r\n  if (!lib.vulnerabilities || !version) {\r\n    return [];\r\n  }\r\n  \r\n  const vulnerabilities: { id: string; severity: 'high' | 'medium' | 'low'; info: string }[] = [];\r\n  \r\n  lib.vulnerabilities.forEach((vuln: any) => {\r\n    // Check if version is in vulnerable range\r\n    let isVulnerable = false;\r\n    \r\n    if (vuln.below && isVersionBelow(version, vuln.below)) {\r\n      isVulnerable = true;\r\n    }\r\n    \r\n    if (vuln.atOrAbove && vuln.below && \r\n        isVersionAtOrAbove(version, vuln.atOrAbove) && \r\n        isVersionBelow(version, vuln.below)) {\r\n      isVulnerable = true;\r\n    }\r\n    \r\n    if (isVulnerable) {\r\n      let id = 'UNKNOWN';\r\n      \r\n      // Look for CVE or other identifier\r\n      if (vuln.identifiers) {\r\n        if (vuln.identifiers.CVE && vuln.identifiers.CVE.length > 0) {\r\n          id = vuln.identifiers.CVE[0];\r\n        } else if (vuln.identifiers.bug && vuln.identifiers.bug.length > 0) {\r\n          id = `BUG-${vuln.identifiers.bug[0]}`;\r\n        } else if (vuln.identifiers.issue && vuln.identifiers.issue.length > 0) {\r\n          id = `ISSUE-${vuln.identifiers.issue[0]}`;\r\n        }\r\n      }\r\n      \r\n      // Map severity\r\n      let severity: 'high' | 'medium' | 'low' = 'medium';\r\n      \r\n      if (vuln.severity === 'high' || vuln.severity === 'critical') {\r\n        severity = 'high';\r\n      } else if (vuln.severity === 'medium' || vuln.severity === 'moderate') {\r\n        severity = 'medium';\r\n      } else if (vuln.severity === 'low') {\r\n        severity = 'low';\r\n      }\r\n      \r\n      // Get info\r\n      const info = vuln.info && vuln.info.length > 0 \r\n        ? vuln.info[0] \r\n        : `Vulnerability in ${lib.component} < ${vuln.below}`;\r\n      \r\n      vulnerabilities.push({\r\n        id,\r\n        severity,\r\n        info\r\n      });\r\n    }\r\n  });\r\n  \r\n  return vulnerabilities;\r\n}\r\n\r\n/**\r\n * Simple semantic version comparison helper functions\r\n */\r\nfunction isVersionBelow(version: string, targetVersion: string): boolean {\r\n  // Handle non-semantic versions and extract numeric parts\r\n  const cleanVersion = version.replace(/[^\\d.]/g, '');\r\n  const cleanTarget = targetVersion.replace(/[^\\d.]/g, '');\r\n  \r\n  if (!cleanVersion || !cleanTarget) return false;\r\n  \r\n  const v1 = cleanVersion.split('.').map(p => parseInt(p, 10) || 0);\r\n  const v2 = cleanTarget.split('.').map(p => parseInt(p, 10) || 0);\r\n  \r\n  for (let i = 0; i < Math.max(v1.length, v2.length); i++) {\r\n    const n1 = i < v1.length ? v1[i] : 0;\r\n    const n2 = i < v2.length ? v2[i] : 0;\r\n    \r\n    if (n1 < n2) return true;\r\n    if (n1 > n2) return false;\r\n  }\r\n  \r\n  return false; // Versions are equal\r\n}\r\n\r\nfunction isVersionAtOrAbove(version: string, targetVersion: string): boolean {\r\n  return !isVersionBelow(version, targetVersion);\r\n}\r\n","import { OSINTResult, Scanner, ScannerInput } from '../types';\r\nimport { makeRequest, extractDomain, createScannerInput } from '../core/request';\r\n\r\n/**\r\n * Scan for historical data using Wayback Machine's API\r\n */\r\nexport const scanWaybackMachine: Scanner<Pick<OSINTResult, 'wayback'>> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const domain = extractDomain(normalizedInput.target);\r\n  \r\n  try {\r\n    // Use Wayback Machine API to get snapshots\r\n    const waybackUrl = `https://archive.org/wayback/available?url=${domain}&timestamp=*&output=json`;\r\n    \r\n    const response = await makeRequest(waybackUrl, {\r\n      method: 'GET',\r\n      timeout: normalizedInput.timeout\r\n    });\r\n    \r\n    if (response.error || !response.data) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'waybackMachine',\r\n        error: response.error || 'Failed to retrieve Wayback Machine data',\r\n        data: {\r\n          wayback: {\r\n            totalSnapshots: 0\r\n          }\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Parse response\r\n    let waybackData;\r\n    if (typeof response.data === 'string') {\r\n      waybackData = JSON.parse(response.data);\r\n    } else {\r\n      waybackData = response.data;\r\n    }\r\n    \r\n    // Check if there are snapshots\r\n    if (!waybackData.archived_snapshots || Object.keys(waybackData.archived_snapshots).length === 0) {\r\n      return {\r\n        status: 'success',\r\n        scanner: 'waybackMachine',\r\n        data: {\r\n          wayback: {\r\n            totalSnapshots: 0\r\n          }\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Get additional snapshots from the CDX API (to get more than just the closest)\r\n    const cdxUrl = `https://web.archive.org/cdx/search/cdx?url=${domain}&output=json&limit=50`;\r\n    \r\n    const cdxResponse = await makeRequest(cdxUrl, {\r\n      method: 'GET',\r\n      timeout: normalizedInput.timeout\r\n    });\r\n    \r\n    let snapshots: { url: string; timestamp: string }[] = [];\r\n    \r\n    if (!cdxResponse.error && cdxResponse.data) {\r\n      try {\r\n        let cdxData;\r\n        if (typeof cdxResponse.data === 'string') {\r\n          cdxData = JSON.parse(cdxResponse.data);\r\n        } else {\r\n          cdxData = cdxResponse.data;\r\n        }\r\n        \r\n        // Skip the first row as it contains field names\r\n        if (cdxData.length > 1) {\r\n          // Format: [urlkey, timestamp, original, mimetype, statuscode, digest, length]\r\n          for (let i = 1; i < cdxData.length; i++) {\r\n            const item = cdxData[i];\r\n            if (item && item.length >= 3) {\r\n              snapshots.push({\r\n                url: `https://web.archive.org/web/${item[1]}/${item[2]}`,\r\n                timestamp: item[1]\r\n              });\r\n            }\r\n          }\r\n        }\r\n      } catch (e) {\r\n        // If CDX API fails, we still have basic data\r\n      }\r\n    }\r\n    \r\n    // Get first and last snapshot dates\r\n    const timestamps = snapshots.map(s => s.timestamp);\r\n    let firstSeen;\r\n    let lastSeen;\r\n    \r\n    if (timestamps.length > 0) {\r\n      timestamps.sort();\r\n      firstSeen = formatWaybackTimestamp(timestamps[0]);\r\n      lastSeen = formatWaybackTimestamp(timestamps[timestamps.length - 1]);\r\n    } else if (waybackData.archived_snapshots.closest) {\r\n      const timestamp = waybackData.archived_snapshots.closest.timestamp;\r\n      firstSeen = formatWaybackTimestamp(timestamp);\r\n      lastSeen = formatWaybackTimestamp(timestamp);\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'waybackMachine',\r\n      data: {\r\n        wayback: {\r\n          firstSeen,\r\n          lastSeen,\r\n          totalSnapshots: snapshots.length || 1,\r\n          snapshots: snapshots.length > 0 ? snapshots : undefined\r\n        }\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'waybackMachine',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        wayback: {\r\n          totalSnapshots: 0\r\n        }\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Format wayback machine timestamp (YYYYMMDDHHMMSS) to ISO date\r\n */\r\nfunction formatWaybackTimestamp(timestamp: string): string {\r\n  if (!timestamp || timestamp.length < 8) {\r\n    return 'Unknown';\r\n  }\r\n  \r\n  // Extract components, assuming minimum YYYYMMDD format\r\n  const year = timestamp.slice(0, 4);\r\n  const month = timestamp.slice(4, 6);\r\n  const day = timestamp.slice(6, 8);\r\n  \r\n  const time = timestamp.length >= 14 ? \r\n    `${timestamp.slice(8, 10)}:${timestamp.slice(10, 12)}:${timestamp.slice(12, 14)}` :\r\n    '00:00:00';\r\n  \r\n  return `${year}-${month}-${day}T${time}Z`;\r\n}\r\n","import { FirewallResult, Scanner, ScannerInput } from '../types.js';\r\nimport { makeRequest, createScannerInput } from '../core/request.js';\r\n\r\n// Common WAF/firewall signatures in headers\r\nconst FIREWALL_SIGNATURES: Record<string, string[]> = {\r\n  'Cloudflare': [\r\n    'cf-ray',\r\n    '__cfduid',\r\n    'cf-request-id',\r\n    'cf-cache-status',\r\n    'cf-connecting-ip',\r\n    'cloudflare',\r\n    'cloudflare-nginx',\r\n    '__cf',\r\n    'cfduid'\r\n  ],\r\n  'Akamai': [\r\n    'x-akamai-transformed',\r\n    'akamai-origin-hop',\r\n    'akamai-global-host',\r\n    'x-akamai',\r\n    'x-check-cacheable',\r\n    'akamai'\r\n  ],\r\n  'Incapsula': [\r\n    'incap_ses',\r\n    'visid_incap',\r\n    'incap_visid_',\r\n    'incapsula',\r\n    'x-iinfo',\r\n    'x-cdn'\r\n  ],\r\n  'Sucuri': [\r\n    'x-sucuri-id',\r\n    'x-sucuri-cache',\r\n    'sucuri',\r\n    'x-sucuri'\r\n  ],\r\n  'ModSecurity': [\r\n    'x-mod-security',\r\n    'modsecurity',\r\n    'mod_security'\r\n  ],\r\n  'AWS WAF': [\r\n    'x-amz-cf-id',\r\n    'x-amz-cf-pop',\r\n    'awselb',\r\n    'aws-alb',\r\n    'x-amz-id',\r\n    'aws'\r\n  ],\r\n  'Fastly': [\r\n    'fastly-io-info',\r\n    'x-fastly',\r\n    'fastly-ssl',\r\n    'fastly',\r\n    'x-served-by'\r\n  ],\r\n  'F5 BIG-IP ASM': [\r\n    'x-wa-info',\r\n    'x-asc',\r\n    'bigip',\r\n    'x-cnection',\r\n    'x-f5'\r\n  ],\r\n  'Barracuda': [\r\n    'x-barracuda',\r\n    'barracuda',\r\n    'barra_counter',\r\n    'barracudacentral'\r\n  ],\r\n  'Imperva': [\r\n    'x-iinfo',\r\n    'x-cdn',\r\n    'imperva',\r\n    '_imp_apg_r_',\r\n    '_imp_di_',\r\n    'imperva_session'\r\n  ],\r\n  'Citrix ADC': [\r\n    'ns_af',\r\n    'citrix_ns_id',\r\n    'ns-cache',\r\n    'ns_tvc',\r\n    'netscaler'\r\n  ],\r\n  'Fortinet/FortiWeb': [\r\n    'fortigate',\r\n    'fortiweb',\r\n    'fortinet',\r\n    'fortiwafsid'\r\n  ],\r\n  'Radware': [\r\n    'x-sl',\r\n    'x-sl-compstate',\r\n    'radware',\r\n    'rwsc'\r\n  ],\r\n  'Wordfence': [\r\n    'wordfence',\r\n    'wfCBLBypass'\r\n  ],\r\n  'SiteLock': [\r\n    'x-sitelock',\r\n    'sitelock-site-verification',\r\n    'sitelock'\r\n  ],\r\n  'Distil Networks': [\r\n    'x-distil-cs',\r\n    'distil_ratelimit',\r\n    'distil'\r\n  ],\r\n  'Reblaze': [\r\n    'rbzid',\r\n    'rbsession',\r\n    'reblaze'\r\n  ]\r\n};\r\n\r\n// Common WAF signatures in response content and behaviors\r\nconst WAF_BEHAVIOR_SIGNATURES: Record<string, string[]> = {\r\n  'Cloudflare': [\r\n    'cloudflare ray id:', \r\n    'cloudflare to restrict access',\r\n    'cloudflare security',\r\n    'checking your browser'\r\n  ],\r\n  'Sucuri': [\r\n    'sucuri website firewall',\r\n    'access denied - sucuri website firewall',\r\n    'blocked by the sucuri website firewall'\r\n  ],\r\n  'ModSecurity': [\r\n    'mod_security',\r\n    'this request has been blocked by the mod security',\r\n    'mod_security rules triggered'\r\n  ],\r\n  'AWS WAF': [\r\n    'aws web application firewall',\r\n    'request blocked by web application firewall'\r\n  ],\r\n  'Imperva': [\r\n    'imperva', \r\n    'incapsula incident id', \r\n    'your request was blocked by imperva'\r\n  ],\r\n  'Akamai': [\r\n    'akamai reference number',\r\n    'you don\\'t have permission to access', \r\n    'access denied. please try again after'\r\n  ],\r\n  'Wordfence': [\r\n    'wordfence security',\r\n    'site access blocked by wordfence',\r\n    'generated by wordfence',\r\n    'a wordfence firewall blocked'\r\n  ],\r\n  'Barracuda': [\r\n    'barracuda networks',\r\n    'you were blocked by the barracuda web application firewall'\r\n  ],\r\n  'F5 BIG-IP ASM': [\r\n    'request rejected by big-ip',\r\n    'the requested url was rejected',\r\n    'please consult with your administrator'\r\n  ],\r\n  'Fortinet/FortiWeb': [\r\n    'your request was blocked by fortinet',\r\n    'your access to this page has been limited by fortiweb'\r\n  ]\r\n};\r\n\r\n// WAF evasion test patterns - These strings often trigger WAF rules when present in requests\r\nconst WAF_DETECTION_PAYLOADS = [\r\n  // SQL Injection payloads\r\n  \"' OR 1=1 --\",\r\n  \"1' OR '1'='1\",\r\n  // XSS payloads\r\n  \"<script>alert(1)</script>\",\r\n  \"<img src=x onerror=alert('XSS')>\",\r\n  // Path traversal\r\n  \"../../../etc/passwd\",\r\n  // Command injection\r\n  \"& cat /etc/passwd\",\r\n  \"; ls -la\",\r\n  // Local File Inclusion\r\n  \"file:///etc/passwd\",\r\n  // Generic malicious patterns\r\n  \"eval(base64_decode\",\r\n  \"union select password\"\r\n];\r\n\r\n/**\r\n * Test if a request is blocked by a WAF\r\n */\r\nasync function testWAFBlocking(\r\n  url: string, \r\n  timeout: number, \r\n  headers?: Record<string, string>\r\n): Promise<{ blocked: boolean; response: any; payload: string }> {\r\n  // First, make a normal request to compare with\r\n  const normalResponse = await makeRequest(url, {\r\n    method: 'GET',\r\n    timeout: timeout,\r\n    headers: headers\r\n  }).catch(() => ({ status: 0, headers: {}, data: '' }));\r\n  \r\n  // Try a few detection payloads until one is blocked or we run out\r\n  for (const payload of WAF_DETECTION_PAYLOADS) {\r\n    try {\r\n      // Construct a URL with the payload in a query parameter\r\n      const testUrl = url.includes('?') \r\n        ? `${url}&waftest=${encodeURIComponent(payload)}` \r\n        : `${url}?waftest=${encodeURIComponent(payload)}`;\r\n      \r\n      const response = await makeRequest(testUrl, {\r\n        method: 'GET',\r\n        timeout: timeout,\r\n        headers: headers\r\n      }).catch(err => ({\r\n        status: err.response?.status || 0,\r\n        headers: err.response?.headers || {},\r\n        data: err.response?.data || '',\r\n        error: err.message\r\n      }));\r\n      \r\n      // Check if status differs significantly from normal response\r\n      if (\r\n        (normalResponse.status >= 200 && normalResponse.status < 400) && \r\n        (response.status === 0 || response.status === 403 || response.status === 406 || \r\n         response.status === 429 || response.status >= 500)\r\n      ) {\r\n        return { \r\n          blocked: true, \r\n          response, \r\n          payload \r\n        };\r\n      }\r\n      \r\n      // Check response body for WAF block messages\r\n      if (response.data && typeof response.data === 'string') {\r\n        const responseText = response.data.toLowerCase();\r\n        \r\n        const wafTerms = [\r\n          'waf', 'firewall', 'blocked', 'security', 'attack', 'malicious',\r\n          'denied', 'suspicious', 'protection', 'threat', 'detected'\r\n        ];\r\n        \r\n        // If response contains 2+ WAF-related terms, consider it blocked\r\n        if (wafTerms.filter(term => responseText.includes(term)).length >= 2) {\r\n          return { \r\n            blocked: true, \r\n            response, \r\n            payload \r\n          };\r\n        }\r\n      }\r\n    } catch (error) {\r\n      // Connection errors can also indicate WAF blocking\r\n      return {\r\n        blocked: true,\r\n        response: { \r\n          status: 0, \r\n          headers: {}, \r\n          data: '', \r\n          error: (error as Error).message \r\n        },\r\n        payload\r\n      };\r\n    }\r\n  }\r\n  \r\n  return { \r\n    blocked: false, \r\n    response: normalResponse,\r\n    payload: '' \r\n  };\r\n}\r\n\r\n/**\r\n * Detect web application firewall (WAF)\r\n */\r\nexport const detectFirewall: Scanner<FirewallResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const timeout = normalizedInput.timeout || 10000;\r\n  \r\n  try {\r\n    // Make a HEAD request to get headers with minimal data transfer\r\n    const headResponse = await makeRequest(normalizedInput.target, {\r\n      method: 'HEAD',\r\n      timeout: timeout,\r\n      headers: normalizedInput.headers\r\n    });\r\n    \r\n    // Also make a GET request to check response content\r\n    const getResponse = await makeRequest(normalizedInput.target, {\r\n      method: 'GET',\r\n      timeout: timeout,\r\n      headers: normalizedInput.headers\r\n    });\r\n    \r\n    if ((headResponse.error && getResponse.error) || (!headResponse.headers && !getResponse.data)) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'firewall',\r\n        error: headResponse.error || getResponse.error || 'Failed to retrieve responses',\r\n        data: {\r\n          detected: false,\r\n          confidence: 0,\r\n          evidence: []\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Convert all header names to lowercase for case-insensitive matching\r\n    const allHeaders = {\r\n      ...(headResponse.headers || {}),\r\n      ...(getResponse.headers || {})\r\n    };\r\n    \r\n    const headers = Object.keys(allHeaders).map(key => key.toLowerCase());\r\n    const headerValues = Object.values(allHeaders).map(val => \r\n      val ? val.toString().toLowerCase() : ''\r\n    );\r\n    \r\n    // Get response content for analysis\r\n    const responseContent = typeof getResponse.data === 'string' \r\n      ? getResponse.data.toLowerCase() \r\n      : JSON.stringify(getResponse.data || '').toLowerCase();\r\n    \r\n    let detected = false;\r\n    let detectedFirewall: string | undefined;\r\n    let confidence = 0;\r\n    let evidence: string[] = [];\r\n    \r\n    // Check for firewall signatures in headers\r\n    for (const [firewallName, signatures] of Object.entries(FIREWALL_SIGNATURES)) {\r\n      let matchCount = 0;\r\n      const matchedEvidence: string[] = [];\r\n      \r\n      for (const signature of signatures) {\r\n        const signatureLower = signature.toLowerCase();\r\n        \r\n        // Check header names\r\n        const headerMatch = headers.find(h => h.includes(signatureLower));\r\n        if (headerMatch) {\r\n          matchCount++;\r\n          matchedEvidence.push(`Header name match: ${headerMatch}`);\r\n          continue;\r\n        }\r\n        \r\n        // Check header values\r\n        const valueMatch = headerValues.some(v => v.includes(signatureLower));\r\n        if (valueMatch) {\r\n          matchCount++;\r\n          matchedEvidence.push(`Header value contains: ${signature}`);\r\n          continue;\r\n        }\r\n        \r\n        // Check response content for signatures\r\n        if (responseContent.includes(signatureLower)) {\r\n          matchCount++;\r\n          matchedEvidence.push(`Response body contains: ${signature}`);\r\n        }\r\n      }\r\n      \r\n      // Calculate confidence based on match ratio\r\n      if (matchCount > 0) {\r\n        const signatureConfidence = Math.min(90, Math.round((matchCount / signatures.length) * 100));\r\n        \r\n        if (signatureConfidence > confidence) {\r\n          detected = true;\r\n          detectedFirewall = firewallName;\r\n          confidence = signatureConfidence;\r\n          evidence = matchedEvidence;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Check response content for WAF-specific messages\r\n    for (const [firewallName, patterns] of Object.entries(WAF_BEHAVIOR_SIGNATURES)) {\r\n      for (const pattern of patterns) {\r\n        if (responseContent.includes(pattern.toLowerCase())) {          const contentConfidence = 95; // Very high confidence for content matches\r\n          \r\n          if (contentConfidence > confidence) {\r\n            detected = true;\r\n            detectedFirewall = firewallName;\r\n            confidence = contentConfidence;\r\n            evidence = [`Response content contains WAF signature: ${pattern}`];\r\n          }\r\n          \r\n          break;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // Additional checks for Server header with known firewall values\r\n    if (allHeaders.server) {\r\n      const serverHeader = (allHeaders.server as string).toLowerCase();\r\n      \r\n      if (serverHeader.includes('cloudflare')) {\r\n        detected = true;\r\n        detectedFirewall = 'Cloudflare';\r\n        confidence = Math.max(confidence, 90);\r\n        evidence.push(`Server header: ${allHeaders.server}`);\r\n      } else if (serverHeader.includes('aws')) {\r\n        detected = true;\r\n        detectedFirewall = 'AWS';\r\n        confidence = Math.max(confidence, 50);\r\n        evidence.push(`Server header: ${allHeaders.server}`);\r\n      } else if (serverHeader.includes('nginx')) {\r\n        // Nginx could be used as reverse proxy for WAF\r\n        if (!detected) {\r\n          detected = true;\r\n          detectedFirewall = 'Possibly Nginx as WAF';\r\n          confidence = 30;\r\n          evidence.push(`Server header: ${allHeaders.server}`);\r\n        }\r\n      } else if (serverHeader.includes('akamai')) {\r\n        detected = true;\r\n        detectedFirewall = 'Akamai';\r\n        confidence = Math.max(confidence, 90);\r\n        evidence.push(`Server header: ${allHeaders.server}`);\r\n      }\r\n    }\r\n    \r\n    // If no firewall detected by passive means, try active probing\r\n    // This is more aggressive but more accurate\r\n    if (!detected || confidence < 50) {\r\n      try {\r\n        // Test if malicious payloads are blocked\r\n        const blockTest = await testWAFBlocking(\r\n          normalizedInput.target,\r\n          Math.min(timeout, 5000), // Use shorter timeout for the test requests\r\n          normalizedInput.headers\r\n        );\r\n        \r\n        if (blockTest.blocked) {\r\n          detected = true;\r\n          \r\n          // If we already have a firewall name but low confidence, keep it\r\n          if (!detectedFirewall) {\r\n            detectedFirewall = 'Unknown WAF';\r\n          }\r\n          \r\n          // Increase confidence based on blocking\r\n          confidence = Math.max(confidence, 80);\r\n          evidence.push(`Blocked suspicious request with payload: ${blockTest.payload}`);\r\n          \r\n          if (blockTest.response.status) {\r\n            evidence.push(`Block response status: ${blockTest.response.status}`);\r\n          }\r\n          \r\n          // Try to identify the WAF from the block response\r\n          if (blockTest.response.data && typeof blockTest.response.data === 'string') {\r\n            const blockResponseText = blockTest.response.data.toLowerCase();\r\n            \r\n            // Check for WAF signatures in block response\r\n            for (const [firewallName, patterns] of Object.entries(WAF_BEHAVIOR_SIGNATURES)) {\r\n              for (const pattern of patterns) {\r\n                if (blockResponseText.includes(pattern.toLowerCase())) {\r\n                  detectedFirewall = firewallName;\r\n                  confidence = 95;\r\n                  evidence.push(`Block response contains signature of: ${firewallName}`);\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      } catch (error) {\r\n        // Error in active testing, continue with passive results\r\n        evidence.push(`Note: Active testing error: ${(error as Error).message}`);\r\n      }\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'firewall',\r\n      data: {\r\n        detected,\r\n        name: detectedFirewall,\r\n        confidence,\r\n        evidence\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'firewall',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        detected: false,\r\n        confidence: 0,\r\n        evidence: []\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","/**\r\n * Frontend-specific exports for browser environments\r\n */\r\n\r\n// Import from modules that work in browsers\r\n// Note: All front-end functionality is exported from the main index\r\n// This file exists to allow for selective imports\r\n\r\nimport { detectForms } from '../modules/formDetection.js';\r\nimport { scanSecurityHeaders } from '../modules/securityHeaders.js';\r\n\r\n// Re-export for separate import paths\r\nexport { detectForms, scanSecurityHeaders };\r\n\r\n/**\r\n * Browser-based DOM form detection that works directly with DOM\r\n */\r\nexport const detectFormsInDOM = async () => {\r\n  // This function only works in browser environments\r\n  if (typeof document === 'undefined') {\r\n    throw new Error('detectFormsInDOM can only be used in browser environments');\r\n  }\r\n  \r\n  // Get the HTML from the current document\r\n  const html = document.documentElement.outerHTML;\r\n  \r\n  // Use the regular form detection with the HTML\r\n  return detectForms({\r\n    target: window.location.href,\r\n    options: { html }\r\n  });\r\n};\r\n","import * as tls from 'tls';\r\nimport * as net from 'net';\r\nimport * as dns from 'dns';\r\nimport * as crypto from 'crypto';\r\nimport { promisify } from 'util';\r\nimport { Scanner, ScannerInput, TLSConfigResult } from '../types';\r\nimport { extractDomain, createScannerInput } from '../core/request';\r\n\r\n// Promisify DNS lookup\r\nconst dnsLookup = promisify(dns.lookup);\r\n\r\n// Standard cipher suite ratings\r\nconst CIPHER_RATINGS: Record<string, 'strong' | 'recommended' | 'adequate' | 'weak' | 'insecure'> = {\r\n  // Strong modern ciphers\r\n  'TLS_AES_256_GCM_SHA384': 'strong',\r\n  'TLS_AES_128_GCM_SHA256': 'strong',\r\n  'TLS_CHACHA20_POLY1305_SHA256': 'strong',\r\n  \r\n  // Recommended ciphers\r\n  'ECDHE-ECDSA-AES256-GCM-SHA384': 'recommended',\r\n  'ECDHE-RSA-AES256-GCM-SHA384': 'recommended',\r\n  'ECDHE-ECDSA-AES128-GCM-SHA256': 'recommended',\r\n  'ECDHE-RSA-AES128-GCM-SHA256': 'recommended',\r\n  'ECDHE-ECDSA-CHACHA20-POLY1305': 'recommended',\r\n  'ECDHE-RSA-CHACHA20-POLY1305': 'recommended',\r\n  \r\n  // Adequate ciphers\r\n  'DHE-RSA-AES256-GCM-SHA384': 'adequate',\r\n  'DHE-RSA-AES128-GCM-SHA256': 'adequate',\r\n  'ECDHE-ECDSA-AES256-SHA384': 'adequate',\r\n  'ECDHE-RSA-AES256-SHA384': 'adequate',\r\n  'ECDHE-ECDSA-AES128-SHA256': 'adequate',\r\n  'ECDHE-RSA-AES128-SHA256': 'adequate',\r\n  \r\n  // Weak ciphers - should be avoided\r\n  'ECDHE-RSA-AES256-SHA': 'weak',\r\n  'ECDHE-ECDSA-AES256-SHA': 'weak',\r\n  'DHE-RSA-AES256-SHA': 'weak',\r\n  'ECDHE-RSA-AES128-SHA': 'weak',\r\n  'ECDHE-ECDSA-AES128-SHA': 'weak',\r\n  'DHE-RSA-AES128-SHA': 'weak',\r\n  'RSA-AES256-GCM-SHA384': 'weak',\r\n  'RSA-AES128-GCM-SHA256': 'weak',\r\n  'RSA-AES256-SHA256': 'weak',\r\n  'RSA-AES128-SHA256': 'weak',\r\n  'RSA-AES256-SHA': 'weak',\r\n  'RSA-AES128-SHA': 'weak',\r\n  \r\n  // Insecure ciphers - should never be used\r\n  'DES-CBC3-SHA': 'insecure',\r\n  'ECDHE-RSA-DES-CBC3-SHA': 'insecure',\r\n  'EDH-RSA-DES-CBC3-SHA': 'insecure',\r\n  'RC4-SHA': 'insecure',\r\n  'RC4-MD5': 'insecure',\r\n  'NULL-SHA': 'insecure',\r\n  'NULL-MD5': 'insecure',\r\n  'EXP-RC4-MD5': 'insecure',\r\n  'EXP-DES-CBC-SHA': 'insecure'\r\n};\r\n\r\n// TLS/SSL protocol versions with their security ratings\r\nconst PROTOCOL_RATINGS: Record<string, {\r\n  rating: 'secure' | 'recommended' | 'adequate' | 'weak' | 'insecure',\r\n  description: string\r\n}> = {\r\n  'TLSv1.3': {\r\n    rating: 'secure',\r\n    description: 'Modern, secure protocol with perfect forward secrecy and improved handshake encryption'\r\n  },\r\n  'TLSv1.2': {\r\n    rating: 'recommended',\r\n    description: 'Secure protocol when configured properly, widely supported'\r\n  },\r\n  'TLSv1.1': {\r\n    rating: 'weak',\r\n    description: 'Outdated protocol with known vulnerabilities, should be disabled'\r\n  },\r\n  'TLSv1': {\r\n    rating: 'insecure',\r\n    description: 'Outdated protocol with known vulnerabilities, should be disabled'\r\n  },\r\n  'SSLv3': {\r\n    rating: 'insecure',\r\n    description: 'Insecure protocol affected by POODLE vulnerability, must be disabled'\r\n  },\r\n  'SSLv2': {\r\n    rating: 'insecure',\r\n    description: 'Critically insecure legacy protocol, must be disabled'\r\n  }\r\n};\r\n\r\n// Known vulnerabilities in SSL/TLS\r\nconst KNOWN_VULNERABILITIES = [\r\n  {\r\n    name: 'BEAST',\r\n    affects: ['TLSv1'],\r\n    description: 'Browser Exploit Against SSL/TLS. Affects CBC ciphers in TLS 1.0 and earlier.',\r\n    severity: 'high'\r\n  },\r\n  {\r\n    name: 'POODLE',\r\n    affects: ['SSLv3'],\r\n    description: 'Padding Oracle On Downgraded Legacy Encryption. Affects all SSLv3 connections.',\r\n    severity: 'high'\r\n  },\r\n  {\r\n    name: 'FREAK',\r\n    affects: ['TLSv1', 'TLSv1.1', 'TLSv1.2'],\r\n    description: 'Forcing RSA Export Keys. Server supports export-grade cipher suites.',\r\n    severity: 'high',\r\n    testFor: (cipher: string) => cipher.includes('EXP')\r\n  },\r\n  {\r\n    name: 'LOGJAM',\r\n    affects: ['TLSv1', 'TLSv1.1', 'TLSv1.2'],\r\n    description: 'Weak Diffie-Hellman key exchange. Server may use weak DH parameters.',\r\n    severity: 'high',\r\n    testFor: (cipher: string) => cipher.includes('DHE') && cipher.includes('EXPORT')\r\n  },\r\n  {\r\n    name: 'ROBOT',\r\n    affects: ['TLSv1', 'TLSv1.1', 'TLSv1.2'],\r\n    description: 'Return Of Bleichenbacher\\'s Oracle Threat. RSA padding oracle vulnerability.',\r\n    severity: 'high',\r\n    testFor: (cipher: string) => cipher.startsWith('RSA')\r\n  },\r\n  {\r\n    name: 'LUCKY13',\r\n    affects: ['TLSv1', 'TLSv1.1', 'TLSv1.2'],\r\n    description: 'Timing attack against CBC ciphers.',\r\n    severity: 'medium',\r\n    testFor: (cipher: string) => cipher.includes('CBC')\r\n  },\r\n  {\r\n    name: 'HEARTBLEED',\r\n    affects: ['TLSv1', 'TLSv1.1', 'TLSv1.2'],\r\n    description: 'OpenSSL heartbeat information disclosure. Can\\'t be detected from connection alone.',\r\n    severity: 'critical'\r\n  },\r\n  {\r\n    name: 'Sweet32',\r\n    affects: ['TLSv1', 'TLSv1.1', 'TLSv1.2'],\r\n    description: 'Birthday attacks on 64-bit block ciphers (3DES/DES)',\r\n    severity: 'medium',\r\n    testFor: (cipher: string) => cipher.includes('3DES') || cipher.includes('DES-CBC')\r\n  }\r\n];\r\n\r\n/**\r\n * Tests if a port is open on a given host\r\n */\r\nasync function isPortOpen(host: string, port: number, timeout: number): Promise<boolean> {\r\n  return new Promise(resolve => {\r\n    const socket = new net.Socket();\r\n    let isOpen = false;\r\n    \r\n    // Set timeout\r\n    socket.setTimeout(timeout);\r\n    \r\n    socket.on('connect', () => {\r\n      isOpen = true;\r\n      socket.end();\r\n    });\r\n    \r\n    socket.on('timeout', () => {\r\n      socket.destroy();\r\n      resolve(false);\r\n    });\r\n    \r\n    socket.on('error', () => {\r\n      resolve(false);\r\n    });\r\n    \r\n    socket.on('close', () => {\r\n      resolve(isOpen);\r\n    });\r\n    \r\n    socket.connect(port, host);\r\n  });\r\n}\r\n\r\n/**\r\n * Test for specific SSL/TLS vulnerabilities by configuration\r\n */\r\nfunction testForVulnerabilities(protocol: string, cipher: tls.CipherNameAndProtocol): Array<{\r\n  name: string;\r\n  description: string;\r\n  severity: 'critical' | 'high' | 'medium' | 'low';\r\n}> {\r\n  const vulnerabilities: Array<{\r\n    name: string;\r\n    description: string;\r\n    severity: 'critical' | 'high' | 'medium' | 'low';\r\n  }> = [];\r\n\r\n  for (const vuln of KNOWN_VULNERABILITIES) {\r\n    if (vuln.affects.includes(protocol)) {\r\n      // If there's a specific test for this vulnerability\r\n      if (!vuln.testFor || vuln.testFor(cipher.name)) {\r\n        vulnerabilities.push({\r\n          name: vuln.name,\r\n          description: vuln.description,\r\n          severity: vuln.severity as 'critical' | 'high' | 'medium' | 'low'\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  return vulnerabilities;\r\n}\r\n\r\n/**\r\n * Calculate the key strength from certificate information\r\n */\r\nfunction calculateKeyStrength(cert: any): { \r\n  strength: number; \r\n  algorithm: string;\r\n  rating: 'strong' | 'adequate' | 'weak' | 'insecure';\r\n} {\r\n  let strength = 0;\r\n  let algorithm = 'unknown';\r\n  let rating: 'strong' | 'adequate' | 'weak' | 'insecure' = 'weak';\r\n\r\n  if (cert.pubkey) {\r\n    // Extract key algorithm and size\r\n    if (cert.pubkey.algo === 'rsa') {\r\n      strength = cert.pubkey.bits || 0;\r\n      algorithm = 'RSA';\r\n      \r\n      if (strength >= 4096) {\r\n        rating = 'strong';\r\n      } else if (strength >= 2048) {\r\n        rating = 'adequate';\r\n      } else if (strength >= 1024) {\r\n        rating = 'weak';\r\n      } else {\r\n        rating = 'insecure';\r\n      }\r\n    } else if (cert.pubkey.algo === 'ec') {\r\n      strength = cert.pubkey.bits || 0;\r\n      algorithm = 'ECDSA';\r\n      \r\n      if (strength >= 384) {\r\n        rating = 'strong';\r\n      } else if (strength >= 256) {\r\n        rating = 'adequate';\r\n      } else {\r\n        rating = 'weak';\r\n      }\r\n    }\r\n  }\r\n\r\n  return { strength, algorithm, rating };\r\n}\r\n\r\n/**\r\n * Check for specific certificate features\r\n */\r\nfunction checkCertificateFeatures(cert: any): Array<{\r\n  feature: string;\r\n  supported: boolean;\r\n  description: string;\r\n}> {\r\n  const features: Array<{\r\n    feature: string;\r\n    supported: boolean;\r\n    description: string;\r\n  }> = [];\r\n  \r\n  // Check for CT (Certificate Transparency)\r\n  const hasSCT = cert.ext && (cert.ext.includes('CT Precertificate SCTs') || cert.ext.includes('signed certificate timestamp'));\r\n  features.push({\r\n    feature: 'Certificate Transparency',\r\n    supported: !!hasSCT,\r\n    description: hasSCT ? \r\n      'Certificate includes embedded SCTs, complying with Certificate Transparency' : \r\n      'Certificate does not include Certificate Transparency information'\r\n  });\r\n  \r\n  // Check for OCSP Must-Staple\r\n  const hasOCSPMustStaple = cert.ext && cert.ext.includes('OCSP Must-Staple');\r\n  features.push({\r\n    feature: 'OCSP Must-Staple',\r\n    supported: !!hasOCSPMustStaple,\r\n    description: hasOCSPMustStaple ?\r\n      'Certificate requires the server to provide OCSP stapling' :\r\n      'Certificate does not enforce OCSP stapling'\r\n  });\r\n  \r\n  // Check for key usage restrictions\r\n  const hasKeyUsage = cert.ext && cert.ext.includes('X509v3 Key Usage');\r\n  features.push({\r\n    feature: 'Key Usage Restrictions',\r\n    supported: !!hasKeyUsage,\r\n    description: hasKeyUsage ?\r\n      'Certificate specifies permitted key usages' :\r\n      'Certificate does not restrict key usages'\r\n  });\r\n  \r\n  return features;\r\n}\r\n\r\n/**\r\n * Get elliptic curve name from the TLS connection if available\r\n */\r\nfunction getECDHCurve(socket: tls.TLSSocket): string | undefined {\r\n  try {\r\n    // Get cipher information from the TLS socket\r\n    const cipher = socket.getCipher();\r\n    // In newer Node versions, we might have more details but we'll use what's available\r\n    return cipher.name.includes('ECDHE') ? 'ECDHE' : undefined;\r\n  } catch (e) {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n/**\r\n * Perform TLS connection with specific options\r\n */\r\nasync function tryTLSConnection(\r\n  host: string, \r\n  port: number, \r\n  timeout: number, \r\n  options: Partial<tls.ConnectionOptions> = {}\r\n): Promise<{success: boolean, socket?: tls.TLSSocket, error?: Error, details?: any}> {\r\n  return new Promise(resolve => {\r\n    try {\r\n      // Allow customizing cipher list if it's provided in options\r\n      const socketOptions: tls.ConnectionOptions = {\r\n        host,\r\n        port,\r\n        timeout,\r\n        rejectUnauthorized: false,\r\n        secureContext: options.secureContext,\r\n        secureProtocol: options.secureProtocol,\r\n        ALPNProtocols: ['h2', 'http/1.1'], // Test for HTTP/2 support\r\n        requestCert: true,\r\n        ...options\r\n      };\r\n      \r\n      // Create socket with options\r\n      const socket = tls.connect(socketOptions);\r\n      \r\n      // Set timeout\r\n      socket.setTimeout(timeout);\r\n        socket.on('secureConnect', () => {\r\n        const details: any = {};\r\n\r\n        // Try to get ALPN protocol (HTTP/2 support)\r\n        try {\r\n          details.alpnProtocol = socket.alpnProtocol;\r\n        } catch (e) {\r\n          // Ignore errors\r\n        }\r\n        \r\n        // Try to get server name indication (SNI)\r\n        try {\r\n          // The requested hostname (not actually the server name from the certificate)\r\n          details.hostname = host;\r\n        } catch (e) {\r\n          // Ignore errors\r\n        }\r\n\r\n        // Try to get the negotiated protocol\r\n        try {\r\n          details.negotiatedProtocol = socket.getProtocol();\r\n        } catch (e) {\r\n          // Ignore errors\r\n        }\r\n\r\n        resolve({ success: true, socket, details });\r\n      });\r\n      \r\n      socket.on('error', (error) => {\r\n        socket.destroy();\r\n        resolve({ success: false, error });\r\n      });\r\n      \r\n      socket.on('timeout', () => {\r\n        socket.destroy();\r\n        resolve({ success: false, error: new Error('Connection timeout') });\r\n      });\r\n    } catch (error) {\r\n      resolve({ success: false, error: error as Error });\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Try to establish a connection with various cipher suite restrictions to test what the server supports\r\n */\r\nasync function testCipherSupport(host: string, port: number, timeout: number, protocol: string): Promise<string[]> {\r\n  const supportedCiphers: string[] = [];\r\n  \r\n  // Get all available ciphers that Node.js supports\r\n  const allCiphers = crypto.getCiphers()\r\n    .filter(c => \r\n      // Filter to just TLS/SSL ciphers\r\n      c.includes('-') && \r\n      !c.startsWith('id-') && \r\n      !c.includes('NULL')\r\n    );\r\n  \r\n  // Group ciphers into categories for prioritized testing\r\n  const cipherGroups = {\r\n    modern: allCiphers.filter(c => \r\n      c.includes('ECDHE') && \r\n      (c.includes('GCM') || c.includes('CHACHA20'))\r\n    ),\r\n    recommended: allCiphers.filter(c =>\r\n      c.includes('DHE') &&\r\n      (c.includes('GCM') || c.includes('CHACHA20'))\r\n    ),\r\n    legacy: allCiphers.filter(c => \r\n      c.includes('AES') && \r\n      !c.includes('GCM')\r\n    ),\r\n    weak: allCiphers.filter(c => \r\n      c.includes('RC4') || \r\n      c.includes('DES') || \r\n      c.includes('3DES') ||\r\n      c.includes('MD5')\r\n    )\r\n  };\r\n  \r\n  // Test modern ciphers first, then try others if needed\r\n  const cipherList = [\r\n    ...cipherGroups.modern,\r\n    ...cipherGroups.recommended,\r\n    ...cipherGroups.legacy,\r\n    ...cipherGroups.weak\r\n  ];\r\n  \r\n  // Limit how many ciphers we test to avoid excessive time consumption\r\n  const maxCiphersToTest = 30;\r\n  const selectedCiphers = cipherList.slice(0, maxCiphersToTest);\r\n  \r\n  // Try a subset of representative ciphers\r\n  for (const cipher of selectedCiphers) {\r\n    try {\r\n      const options: tls.ConnectionOptions = {\r\n        minVersion: protocol as any,\r\n        maxVersion: protocol as any,\r\n        ciphers: cipher\r\n      };\r\n      \r\n      const result = await tryTLSConnection(host, port, timeout / 2, options);\r\n      if (result.success && result.socket) {\r\n        supportedCiphers.push(result.socket.getCipher().name);\r\n        result.socket.destroy();\r\n      }\r\n    } catch (e) {\r\n      // Ignore errors for individual cipher tests\r\n    }\r\n  }\r\n  \r\n  return [...new Set(supportedCiphers)]; // Remove duplicates\r\n}\r\n\r\n/**\r\n * Extract certificate information from TLS socket\r\n */\r\nfunction extractCertificateInfo(socket: tls.TLSSocket, host: string): {\r\n  protocol: string;\r\n  cipher: tls.CipherNameAndProtocol;\r\n  certInfo: any;\r\n  issues: TLSConfigResult['issues'];\r\n  certificateChain?: any[];\r\n  securityRating: 'A+' | 'A' | 'B' | 'C' | 'D' | 'F';\r\n  features?: Array<{feature: string; supported: boolean; description: string}>;\r\n  vulnerabilities?: Array<{name: string; description: string; severity: string}>;\r\n} {\r\n  const protocol = socket.getProtocol() || '';\r\n  const cipher = socket.getCipher();\r\n  const cert = socket.getPeerCertificate(true); // true gets the whole certificate chain\r\n  \r\n  // Extract certificate chain\r\n  const chain: any[] = [];\r\n  let currentCert = cert;\r\n  \r\n  while (currentCert && !(currentCert.issuerCertificate?.fingerprint === currentCert.fingerprint)) {\r\n    // Add certificate to chain if it's not already there (avoid infinite loops from self-signed certs)\r\n    if (chain.findIndex(c => c.fingerprint === currentCert.fingerprint) === -1) {\r\n      chain.push({\r\n        subject: currentCert.subject,\r\n        issuer: currentCert.issuer,\r\n        validFrom: currentCert.valid_from,\r\n        validTo: currentCert.valid_to,\r\n        fingerprint: currentCert.fingerprint\r\n      });\r\n      \r\n      // Move to the next certificate in the chain\r\n      if (currentCert.issuerCertificate && \r\n          currentCert.fingerprint !== currentCert.issuerCertificate.fingerprint) {\r\n        currentCert = currentCert.issuerCertificate;\r\n      } else {\r\n        break;\r\n      }\r\n    } else {\r\n      break; // End if we've seen this certificate before (prevent infinite loop)\r\n    }\r\n  }\r\n  \r\n  // Get current date for certificate validation\r\n  const now = new Date();\r\n  const validFrom = new Date(cert.valid_from);\r\n  const validTo = new Date(cert.valid_to);\r\n  const expiresIn = Math.round((validTo.getTime() - now.getTime()) / (1000 * 60 * 60 * 24)); // days\r\n  const isExpired = now > validTo;\r\n  const isNotYetValid = now < validFrom;\r\n  \r\n  // Create issues list\r\n  const issues: TLSConfigResult['issues'] = [];\r\n  \r\n  // Certificate validity issues\r\n  if (isExpired) {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: 'SSL certificate has expired.'\r\n    });\r\n  }\r\n  \r\n  if (isNotYetValid) {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: 'SSL certificate is not yet valid.'\r\n    });\r\n  }\r\n  \r\n  if (expiresIn <= 30 && !isExpired) {\r\n    issues.push({\r\n      severity: 'medium',\r\n      description: `SSL certificate expires soon (${expiresIn} days).`\r\n    });\r\n  }\r\n  \r\n  // Certificate hostname validation\r\n  const hostnames = [host];\r\n  if (host.startsWith('www.')) {\r\n    hostnames.push(host.substring(4)); // Add non-www version\r\n  } else {\r\n    hostnames.push(`www.${host}`); // Add www version\r\n  }\r\n\r\n  // Check if any of the hostnames are covered by the certificate\r\n  const altNames = cert.subjectaltname?.split(', ').map((name: string) => {\r\n    if (name.startsWith('DNS:')) {\r\n      return name.substring(4);\r\n    }\r\n    return name;\r\n  }) || [];\r\n\r\n  const validNames = [\r\n    cert.subject?.CN,\r\n    ...altNames\r\n  ].filter(Boolean);\r\n\r\n  const hostnameMatch = hostnames.some(hostname => \r\n    validNames.some(name => {\r\n      // Check for wildcard match e.g. *.example.com matches sub.example.com\r\n      if (name.startsWith('*.')) {\r\n        const domainPart = name.substring(2);\r\n        return hostname.endsWith(domainPart) && \r\n               hostname.split('.').length === domainPart.split('.').length + 1;\r\n      }\r\n      return name === hostname;\r\n    })\r\n  );\r\n\r\n  if (!hostnameMatch) {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: `Certificate hostname mismatch. Certificate is not valid for: ${host}`\r\n    });\r\n  }\r\n  \r\n  // Protocol version checks\r\n  const protocolRating = PROTOCOL_RATINGS[protocol] || {\r\n    rating: 'unknown',\r\n    description: 'Unknown protocol version'\r\n  };\r\n  \r\n  if (protocolRating.rating === 'insecure' || protocolRating.rating === 'weak') {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: `Server uses ${protocolRating.rating} protocol: ${protocol}. ${protocolRating.description}`\r\n    });\r\n  } else if (protocolRating.rating === 'adequate') {\r\n    issues.push({\r\n      severity: 'medium',\r\n      description: `Server uses ${protocolRating.rating} protocol: ${protocol}. ${protocolRating.description}`\r\n    });\r\n  }\r\n  \r\n  // Cipher suite checks\r\n  const cipherRating = CIPHER_RATINGS[cipher.name] || 'weak';\r\n  if (cipherRating === 'insecure') {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: `Server uses insecure cipher: ${cipher.name}.`\r\n    });\r\n  } else if (cipherRating === 'weak') {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: `Server uses weak cipher: ${cipher.name}.`\r\n    });\r\n  } else if (cipherRating === 'adequate') {\r\n    issues.push({\r\n      severity: 'medium',\r\n      description: `Server uses adequate but not ideal cipher: ${cipher.name}.`\r\n    });\r\n  }\r\n  \r\n  // Key strength checks\r\n  const keyInfo = calculateKeyStrength(cert);\r\n  if (keyInfo.rating === 'insecure') {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: `Certificate uses insecure ${keyInfo.algorithm} key (${keyInfo.strength} bits).`\r\n    });\r\n  } else if (keyInfo.rating === 'weak') {\r\n    issues.push({\r\n      severity: 'medium',\r\n      description: `Certificate uses weak ${keyInfo.algorithm} key (${keyInfo.strength} bits).`\r\n    });\r\n  }\r\n\r\n  // Self-signed certificate check\r\n  const isSelfSigned = chain.length === 1 || \r\n      (cert.issuer.CN === cert.subject.CN && \r\n       cert.issuer.O === cert.subject.O);\r\n  \r\n  if (isSelfSigned) {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: 'Certificate is self-signed and not from a trusted authority.'\r\n    });\r\n  }\r\n    // Check certificate signature algorithm\r\n  // Node.js types don't include sigalg but it's actually available\r\n  const sigAlgo = (cert as any).sigalg?.toLowerCase() || '';\r\n  if (sigAlgo.includes('sha1') || sigAlgo.includes('md5')) {\r\n    issues.push({\r\n      severity: 'high',\r\n      description: `Certificate uses weak signature algorithm: ${(cert as any).sigalg}`\r\n    });\r\n  }\r\n\r\n  // Test for known vulnerabilities\r\n  const vulnerabilities = testForVulnerabilities(protocol, cipher);\r\n  \r\n  // Add vulnerabilities to issues\r\n  for (const vuln of vulnerabilities) {\r\n    issues.push({\r\n      severity: vuln.severity as 'high' | 'medium' | 'low' | 'info',\r\n      description: `${vuln.name}: ${vuln.description}`\r\n    });\r\n  }\r\n  \r\n  // Certificate features\r\n  const features = checkCertificateFeatures(cert);\r\n  \r\n  // Calculate overall security rating\r\n  let securityScore = 100;\r\n  \r\n  // Deduct points based on issues\r\n  for (const issue of issues) {\r\n    if (issue.severity === 'high') {\r\n      securityScore -= 25;\r\n    } else if (issue.severity === 'medium') {\r\n      securityScore -= 10;\r\n    } else if (issue.severity === 'low') {\r\n      securityScore -= 5;\r\n    }\r\n  }\r\n  \r\n  // Add points for good security features\r\n  for (const feature of features) {\r\n    if (feature.supported) {\r\n      securityScore += 5;\r\n    }\r\n  }\r\n  \r\n  // Cap the score between 0 and 100\r\n  securityScore = Math.max(0, Math.min(100, securityScore));\r\n  \r\n  // Convert score to letter grade\r\n  let securityRating: 'A+' | 'A' | 'B' | 'C' | 'D' | 'F';\r\n  if (securityScore >= 95) {\r\n    securityRating = 'A+';\r\n  } else if (securityScore >= 85) {\r\n    securityRating = 'A';\r\n  } else if (securityScore >= 70) {\r\n    securityRating = 'B';\r\n  } else if (securityScore >= 60) {\r\n    securityRating = 'C';\r\n  } else if (securityScore >= 50) {\r\n    securityRating = 'D';\r\n  } else {\r\n    securityRating = 'F';\r\n  }\r\n  \r\n  return {\r\n    protocol,\r\n    cipher,\r\n    certInfo: {\r\n      issuer: cert.issuer.CN || cert.issuer.O || 'Unknown',\r\n      subject: cert.subject.CN || cert.subject.O || 'Unknown',\r\n      validFrom: validFrom.toISOString(),\r\n      validTo: validTo.toISOString(),\r\n      expiresIn: expiresIn,\r\n      subjectAltNames: altNames,\r\n      serialNumber: cert.serialNumber,\r\n      signatureAlgorithm: (cert as any).sigalg,\r\n      keyStrength: keyInfo.strength,\r\n      keyAlgorithm: keyInfo.algorithm\r\n    },\r\n    certificateChain: chain,\r\n    issues,\r\n    securityRating,\r\n    features,\r\n    vulnerabilities\r\n  };\r\n}\r\n\r\n/**\r\n * Scan the TLS configuration of a domain\r\n * Note: This can only be used in a Node.js environment\r\n */\r\nexport const scanTLS: Scanner<TLSConfigResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const domain = extractDomain(normalizedInput.target);\r\n  const timeout = normalizedInput.timeout || 10000;\r\n  \r\n  const diagnosticInfo: string[] = [];\r\n  \r\n  try {\r\n    // First, perform a DNS lookup to check if domain resolves\r\n    try {\r\n      const dnsResult = await dnsLookup(domain);\r\n      diagnosticInfo.push(`Domain ${domain} resolves to IP: ${dnsResult.address}`);\r\n    } catch (error) {\r\n      diagnosticInfo.push(`DNS lookup error: ${(error as Error).message}`);\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'tlsConfig',\r\n        error: `Failed to resolve domain: ${(error as Error).message}`,\r\n        data: {\r\n          version: '',\r\n          ciphers: [],\r\n          certificate: {\r\n            issuer: '',\r\n            subject: '',\r\n            validFrom: '',\r\n            validTo: '',\r\n            expiresIn: 0\r\n          },\r\n          isValid: false,\r\n          issues: [{\r\n            severity: 'high',\r\n            description: `Failed to resolve domain: ${(error as Error).message}`\r\n          }],\r\n          diagnosticInfo\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Define ports to try\r\n    const portsToTry = [443, 8443]; \r\n    let portOpen = false;\r\n    let openPort = 0;\r\n    \r\n    // Check if ports are open first\r\n    for (const port of portsToTry) {\r\n      diagnosticInfo.push(`Checking if port ${port} is open...`);\r\n      const isOpen = await isPortOpen(domain, port, timeout);\r\n      if (isOpen) {\r\n        diagnosticInfo.push(`Port ${port} is open.`);\r\n        portOpen = true;\r\n        openPort = port;\r\n        break;\r\n      } else {\r\n        diagnosticInfo.push(`Port ${port} is closed or filtered.`);\r\n      }\r\n    }\r\n    \r\n    if (!portOpen) {\r\n      return {\r\n        status: 'failure',\r\n        scanner: 'tlsConfig',\r\n        error: 'No open TLS ports found',\r\n        data: {\r\n          version: '',\r\n          ciphers: [],\r\n          certificate: {\r\n            issuer: '',\r\n            subject: '',\r\n            validFrom: '',\r\n            validTo: '',\r\n            expiresIn: 0\r\n          },\r\n          isValid: false,\r\n          issues: [{\r\n            severity: 'high',\r\n            description: 'No open TLS ports found (tried: 443, 8443)'\r\n          }],\r\n          diagnosticInfo\r\n        },\r\n        timeTaken: Date.now() - startTime\r\n      };\r\n    }\r\n    \r\n    // Now try different TLS protocols on the open port\r\n    const tlsVersions: {version: string, options: tls.ConnectionOptions}[] = [\r\n      { version: 'TLSv1.3', options: { minVersion: 'TLSv1.3', maxVersion: 'TLSv1.3' } },\r\n      { version: 'TLSv1.2', options: { minVersion: 'TLSv1.2', maxVersion: 'TLSv1.2' } },\r\n      { version: 'Default', options: {} } // Try with defaults as fallback\r\n    ];\r\n    \r\n    for (const { version, options } of tlsVersions) {\r\n      diagnosticInfo.push(`Attempting TLS connection on port ${openPort} with ${version} protocol...`);\r\n      \r\n      const connectionResult = await tryTLSConnection(domain, openPort, timeout, options);\r\n      \r\n      if (connectionResult.success && connectionResult.socket) {\r\n        diagnosticInfo.push(`Successfully established TLS connection using ${version}.`);\r\n          // Extract certificate and protocol info\r\n        const { \r\n          protocol, \r\n          cipher, \r\n          certInfo, \r\n          issues,\r\n          securityRating,\r\n          features,\r\n          vulnerabilities,\r\n          certificateChain\r\n        } = extractCertificateInfo(connectionResult.socket, domain);\r\n        \r\n        // Test supported ciphers for this protocol version\r\n        const supportedCiphers = await testCipherSupport(domain, openPort, timeout / 2, protocol);\r\n        \r\n        // Close the connection\r\n        connectionResult.socket.end();\r\n        \r\n        // Categorize ciphers by strength\r\n        const cipherStrengths = supportedCiphers.map(cipherName => {\r\n          const rating = CIPHER_RATINGS[cipherName] || 'unknown';\r\n          return {\r\n            name: cipherName,\r\n            strength: rating\r\n          };\r\n        });\r\n        \r\n        return {\r\n          status: 'success',\r\n          scanner: 'tlsConfig',\r\n          data: {\r\n            version: protocol,\r\n            ciphers: supportedCiphers,\r\n            cipherDetails: cipherStrengths,\r\n            certificate: certInfo,\r\n            certificateChain,\r\n            isValid: !issues.some(issue => issue.severity === 'high'),\r\n            issues,\r\n            securityRating,\r\n            supportedFeatures: features?.filter(f => f.supported).map(f => f.feature) || [],\r\n            missingFeatures: features?.filter(f => !f.supported).map(f => f.feature) || [],\r\n            vulnerabilities: vulnerabilities || [],\r\n            diagnosticInfo\r\n          },\r\n          timeTaken: Date.now() - startTime\r\n        };\r\n      } else {\r\n        const errorMsg = connectionResult.error?.message || 'Unknown error';\r\n        diagnosticInfo.push(`Failed with ${version}: ${errorMsg}`);\r\n      }\r\n    }\r\n    \r\n    // If we reached here, all connection attempts failed\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'tlsConfig',\r\n      error: 'All TLS connection attempts failed',\r\n      data: {\r\n        version: '',\r\n        ciphers: [],\r\n        certificate: {\r\n          issuer: '',\r\n          subject: '',\r\n          validFrom: '',\r\n          validTo: '',\r\n          expiresIn: 0\r\n        },\r\n        isValid: false,\r\n        issues: [{\r\n          severity: 'high',\r\n          description: 'Failed to establish TLS connection after multiple attempts'\r\n        }],\r\n        diagnosticInfo\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'tlsConfig',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: {\r\n        version: '',\r\n        ciphers: [],\r\n        certificate: {\r\n          issuer: '',\r\n          subject: '',\r\n          validFrom: '',\r\n          validTo: '',\r\n          expiresIn: 0\r\n        },\r\n        isValid: false,\r\n        issues: [{\r\n          severity: 'high',\r\n          description: `Error scanning TLS configuration: ${(error as Error).message}`\r\n        }],\r\n        diagnosticInfo\r\n      },\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import * as dns from 'dns';\r\nimport { promisify } from 'util';\r\nimport { DNSRecordResult, Scanner, ScannerInput } from '../types';\r\nimport { extractDomain, createScannerInput } from '../core/request';\r\n\r\n// Promisify DNS methods\r\nconst resolveTxt = promisify(dns.resolveTxt);\r\nconst resolveMx = promisify(dns.resolveMx);\r\nconst resolveNs = promisify(dns.resolveNs);\r\n\r\n/**\r\n * Scan DNS records (SPF, DMARC, DKIM)\r\n * Note: This can only be used in a Node.js environment\r\n */\r\nexport const scanDNSRecords: Scanner<DNSRecordResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const domain = extractDomain(normalizedInput.target);\r\n  \r\n  // Initialize result\r\n  const result: DNSRecordResult = {\r\n    spf: {\r\n      exists: false,\r\n      valid: false\r\n    },\r\n    dmarc: {\r\n      exists: false,\r\n      valid: false\r\n    },\r\n    dkim: {\r\n      exists: false,\r\n      valid: false\r\n    },\r\n    dnssec: {\r\n      enabled: false,\r\n      valid: false\r\n    }\r\n  };\r\n  \r\n  try {\r\n    // Check SPF record\r\n    try {\r\n      const txtRecords = await resolveTxt(domain);      const spfRecord = txtRecords.find((record: string[]) => {\r\n        const recordStr = record.join('');\r\n        return recordStr.startsWith('v=spf1');\r\n      });\r\n      \r\n      if (spfRecord) {\r\n        const recordStr = spfRecord.join('');\r\n        result.spf = {\r\n          exists: true,\r\n          valid: true,\r\n          record: recordStr,\r\n          issues: []\r\n        };\r\n        \r\n        // Basic SPF validation\r\n        if (!recordStr.includes('~all') && !recordStr.includes('-all')) {\r\n          result.spf.issues = ['SPF record does not end with ~all or -all'];\r\n          result.spf.valid = false;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      result.spf.exists = false;\r\n      result.spf.issues = ['Failed to retrieve SPF record'];\r\n    }\r\n    \r\n    // Check DMARC record\r\n    try {\r\n      const dmarcRecords = await resolveTxt('_dmarc.' + domain);      const dmarcRecord = dmarcRecords.find((record: string[]) => {\r\n        const recordStr = record.join('');\r\n        return recordStr.startsWith('v=DMARC1');\r\n      });\r\n      \r\n      if (dmarcRecord) {\r\n        const recordStr = dmarcRecord.join('');\r\n        result.dmarc = {\r\n          exists: true,\r\n          valid: true,\r\n          record: recordStr,\r\n          issues: []\r\n        };\r\n        \r\n        // Extract policy\r\n        const policyMatch = recordStr.match(/p=([^;]+)/);\r\n        if (policyMatch) {\r\n          result.dmarc.policy = policyMatch[1];\r\n        }\r\n        \r\n        // Basic DMARC validation\r\n        if (!recordStr.includes('p=')) {\r\n          result.dmarc.issues = ['DMARC record does not include a policy (p=)'];\r\n          result.dmarc.valid = false;\r\n        } else if (result.dmarc.policy === 'none') {\r\n          result.dmarc.issues = ['DMARC policy is set to \"none\" which only monitors but takes no action'];\r\n        }\r\n      }\r\n    } catch (error) {\r\n      result.dmarc.exists = false;\r\n      result.dmarc.issues = ['Failed to retrieve DMARC record'];\r\n    }\r\n    \r\n    // Check DKIM (basic check for common selectors)\r\n    const commonSelectors = ['default', 'google', 'selector1', 'selector2', 'k1'];\r\n    const dkimResults: string[] = [];\r\n    \r\n    for (const selector of commonSelectors) {\r\n      try {\r\n        const dkimRecords = await resolveTxt(`${selector}._domainkey.${domain}`);\r\n        if (dkimRecords && dkimRecords.length > 0) {\r\n          dkimResults.push(selector);\r\n        }\r\n      } catch (error) {\r\n        // Ignore errors - just means no record for this selector\r\n      }\r\n    }\r\n    \r\n    if (dkimResults.length > 0) {\r\n      result.dkim = {\r\n        exists: true,\r\n        valid: true,\r\n        selectors: dkimResults\r\n      };\r\n    } else {\r\n      result.dkim.issues = ['No DKIM records found for common selectors'];\r\n    }\r\n    \r\n    // Basic heuristic DNSSEC check by looking for DS records\r\n    try {\r\n      // This is a simplified check and doesn't fully validate DNSSEC\r\n      const nsRecords = await resolveNs(domain);\r\n      if (nsRecords && nsRecords.length > 0) {\r\n        // We'll mark DNSSEC as potentially enabled, but proper validation requires\r\n        // specialized tools beyond the scope of a basic package\r\n        result.dnssec = {\r\n          enabled: true,\r\n          valid: true,\r\n          issues: ['Basic DNSSEC detection only. Full validation requires specialized tools.']\r\n        };\r\n      }\r\n    } catch (error) {\r\n      result.dnssec.issues = ['Failed to check nameservers for DNSSEC'];\r\n    }\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'dnsRecords',\r\n      data: result,\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'dnsRecords',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: result,\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n","import * as net from 'net';\r\nimport { PortScanResult, Scanner, ScannerInput } from '../types';\r\nimport { extractDomain, createScannerInput } from '../core/request';\r\n\r\n// Default list of common ports to scan\r\nconst DEFAULT_PORTS = [\r\n  21,    // FTP\r\n  22,    // SSH\r\n  23,    // Telnet\r\n  25,    // SMTP\r\n  53,    // DNS\r\n  80,    // HTTP\r\n  110,   // POP3\r\n  143,   // IMAP\r\n  443,   // HTTPS\r\n  465,   // SMTPS\r\n  587,   // SMTP Submission\r\n  993,   // IMAPS\r\n  995,   // POP3S\r\n  3306,  // MySQL\r\n  5432,  // PostgreSQL\r\n  8080,  // HTTP Alternate\r\n  8443   // HTTPS Alternate\r\n];\r\n\r\n// Map of common services by port\r\nconst SERVICE_NAMES: Record<number, string> = {\r\n  21: 'FTP',\r\n  22: 'SSH',\r\n  23: 'Telnet',\r\n  25: 'SMTP',\r\n  53: 'DNS',\r\n  80: 'HTTP',\r\n  110: 'POP3',\r\n  143: 'IMAP',\r\n  443: 'HTTPS',\r\n  465: 'SMTPS',\r\n  587: 'SMTP Submission',\r\n  993: 'IMAPS',\r\n  995: 'POP3S',\r\n  3306: 'MySQL',\r\n  5432: 'PostgreSQL',\r\n  8080: 'HTTP Alternate',\r\n  8443: 'HTTPS Alternate'\r\n};\r\n\r\n/**\r\n * Scan for open ports\r\n * Note: This can only be used in a Node.js environment\r\n */\r\nexport const scanPorts: Scanner<PortScanResult> = async (\r\n  input: ScannerInput\r\n) => {\r\n  const startTime = Date.now();\r\n  const normalizedInput = createScannerInput(input);\r\n  const domain = extractDomain(normalizedInput.target);\r\n  const timeout = normalizedInput.timeout || 3000; // Use short timeout for port scan\r\n  \r\n  // Get ports to scan from options or use defaults\r\n  const portsToScan = normalizedInput.options?.ports || DEFAULT_PORTS;\r\n  \r\n  // Create result\r\n  const result: PortScanResult = {\r\n    openPorts: [],\r\n    total: 0\r\n  };\r\n  \r\n  try {\r\n    // Scan each port\r\n    const portPromises = portsToScan.map((port: number) => {\r\n      return new Promise<void>(resolve => {\r\n        // Create socket\r\n        const socket = new net.Socket();\r\n        let resolved = false;\r\n        \r\n        // Set timeout\r\n        socket.setTimeout(timeout);\r\n        \r\n        // Handle connection\r\n        socket.on('connect', () => {\r\n          if (resolved) return;\r\n          resolved = true;\r\n          \r\n          // Try to get banner by sending a simple request\r\n          let banner = '';\r\n          const bannerTimeout = setTimeout(() => {\r\n            socket.destroy();\r\n            result.openPorts.push({\r\n              port,\r\n              service: SERVICE_NAMES[port] || undefined,\r\n              banner: banner || undefined\r\n            });\r\n            resolve();\r\n          }, 1000);\r\n          \r\n          // Listen for data (banner)          \r\n           socket.once('data', (data: Buffer) => {\r\n            banner = data.toString().trim();\r\n            clearTimeout(bannerTimeout);\r\n            socket.destroy();\r\n            \r\n            result.openPorts.push({\r\n              port,\r\n              service: SERVICE_NAMES[port] || undefined,\r\n              banner: banner || undefined\r\n            });\r\n            \r\n            resolve();\r\n          });\r\n          \r\n          // Send a request to trigger banner for common protocols\r\n          if (port === 80) {\r\n            socket.write('HEAD / HTTP/1.1\\r\\nHost: ' + domain + '\\r\\n\\r\\n');\r\n          } else if (port === 443) {\r\n            socket.destroy(); // HTTPS requires TLS, can't get banner directly\r\n            result.openPorts.push({\r\n              port,\r\n              service: 'HTTPS'\r\n            });\r\n            resolve();\r\n          } else if (port === 25 || port === 587) {\r\n            // SMTP\r\n            // Banner will be automatically sent\r\n          } else if (port === 22) {\r\n            // SSH banner will be automatically sent\r\n          } else {\r\n            // Other protocols - no specific request\r\n            socket.destroy();\r\n            result.openPorts.push({\r\n              port,\r\n              service: SERVICE_NAMES[port] || undefined\r\n            });\r\n            resolve();\r\n          }\r\n        });\r\n        \r\n        // Handle errors\r\n        socket.on('error', () => {\r\n          if (resolved) return;\r\n          resolved = true;\r\n          socket.destroy();\r\n          resolve();\r\n        });\r\n        \r\n        // Handle timeout\r\n        socket.on('timeout', () => {\r\n          if (resolved) return;\r\n          resolved = true;\r\n          socket.destroy();\r\n          resolve();\r\n        });\r\n        \r\n        // Try to connect\r\n        socket.connect(port, domain);\r\n      });\r\n    });\r\n    \r\n    // Wait for all port scans to complete\r\n    await Promise.all(portPromises);\r\n    \r\n    // Set total\r\n    result.total = result.openPorts.length;\r\n    \r\n    return {\r\n      status: 'success',\r\n      scanner: 'portScan',\r\n      data: result,\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: 'failure',\r\n      scanner: 'portScan',\r\n      error: (error as Error).message || 'Unknown error',\r\n      data: result,\r\n      timeTaken: Date.now() - startTime\r\n    };\r\n  }\r\n};\r\n"]}